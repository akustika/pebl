define Start(lPar)
{
 ## (c) 2006 Shane T. Mueller
 ## stmuelle @ indiana.edu
 ## Attentional Vigilance Test, PEBL's version of the
 ## Test of Variables of Attention (TOVA)(tm), based on description in:
 ##
 ## Forbes, G. B. (1998). Clinical Utility of the Test of 
 ## Variables of Attention (TOVA) in the Diagnosis of 
 ## Attention-Deficit/Hyperactivity Disorder. Journal of Clinical Psychology,
 ## 54 (4), 461-476.
 ##
 ## The following text is paraphrased from method section of above article:
 ## In this procedure, the test stimulus is a square containing a square hole
 ## near either the top or bottom edge.  Targets are holes on the top; 
 ## subjects are to make responses when the target is on top and not on bottom.
 ## 
 ## Stimuli are presented for 100 ms, with SOA of 2000 ms.  The entire test
 ## takes 22.5 minutes.  For the first half, targets are present 22.5 % of 
 ## the time, the second half present 77.5% of the time.
 ## 
 ## To approximate this schedule, we use 640 stimuli:   
 ##  In the first half of 320 stimuli, 72 signals and 248 non-signals.
 ##  In the second half of 320 stimuli, 248 non-signals and 72 signals.
 ## Norms are available in:
 ##
 ## Greenberg, L. M. , & Waldman, I D. (1993). Developmental normative data 
 ## on the Test of Variable of Attention (T.O.V.A. tm). Journal of Child 
 ## Psychology and Psychiatry, 34, 1019-1030.
 ##
 ## For use with PEBL 0.06 or later
 ## http://pebl.sf.net
 ## Part of  The PEBL Psychological Test Battery


  ## results are stored in tmpresults.dat
  gFileOut <-FileOpenAppend("avt-" + gSubNum +".txt")
 
  ## Initialize global objects for use later. Defined at end of file
  Initialize()
 
  
  ####################################################
  ##  Now, generate stimuli/conditions
  ####################################################

   firsthalf <- Shuffle(Merge(Repeat(1,72), Repeat(0,248)))
   secondhalf <- Shuffle(Merge(Repeat(0,72), Repeat(1,248)))

   #firsthalf <- Shuffle(Merge(Repeat(1,7), Repeat(0,10)))
   #secondhalf <- Shuffle(Merge(Repeat(0,7), Repeat(1,10)))
   stim <- Merge(firsthalf,secondhalf)

  ####################################################
  ## Begin presenting and collecting data
  ####################################################


   ## Good researchers collect demographic data anonymously.
   ##  GetNIMHDemographics(gSubNum, gWin, "avt-demographics.txt")

   ## Give instructions; wait for them to hit a key, 
   SetText(gInstructions,"You are about to take part in an experiment that involves attending to stimuli on a screen.  It will take approximately 24 minutes.
Press any key to begin.")
   Show(gInstructions)
   Draw()  
   WaitForAnyKeyPress()
   Hide(gInstructions)
   Draw()


  ##############################################
  ##############################################
  ##
  ## Set up the basic  environment 
  ##
   
   black  <- MakeColor("black")
   white <- MakeColor("white")

   gOuter <- Square(gVideoWidth/2,gVideoHeight/2,250,white,1)
   gInnerTarg <- Square(gVideoWidth/2,gVideoHeight/2 - 75,50,black,1)
   gInnerFoil <- Square(gVideoWidth/2,gVideoHeight/2 + 75,50,black,1)


   AddObject(gOuter,gWin)
   AddObject(gInnerTarg,gWin)
   AddObject(gInnerFoil,gWin)



   ## 
   ## Global data structures which save data for analysis and
   ## report at end of study. The variables are paired, for first-half
   ## and second-half of the study.

   rtCorr1 <- []
   rtCorr2 <- []
   rtInc1 <- []
   rtInc2 <- []
   ommissions1  <- 0   # Ommission error (failure to respond to target)
   ommissions2  <- 0   #
   commissions1 <- 0   # Commission error (false alarm to foil)
   commissions2 <- 0   #
   multiples1   <- 0   # multiple responses on a trial
   multiples2   <- 0   #
   antic1       <- 0   # too fast
   antic2       <- 0   #
   corrTarg1  <- 0     # Number of correct Targets
   corrTarg2  <- 0     #
   corrFoil1  <- 0     # Number of correct Foils
   corrFoil2  <- 0     #
   totalTrials1 <- 0   # Total Number of trials
   totalTrials2 <- 0   # 


   Print("sub trial targ toofast responded corr mult time rt")


    half <- 1  
    Wait(2000)
    trialnum <- 0
    loop(i,stim)
    {

     ## The regime changes halfway through--keep track of this.
     if(trialnum == 320)
     { 
        half <- 2
     } 

      resp1     <- 0  ## Was there a response during initial presentation?
      resp2     <- 0  ## Was there a response during ISI
      respMult  <- 0  ## were there multiple responses on trial?      

      timeStart <- GetTime()
      if( i == 1) 
      {  
      ########################
      ########################
      ### Target
      ###

	  DrawTarg()
      r1 <- WaitForListKeyPressWithTimeout(["X"],100,1)
      time1 <- GetTime()

      HideAll()
      if(r1 == 1)
      {

        r2 <- WaitForListKeyPressWithTimeout(["X"],1850,1)
        time2 <- GetTime()

        remains <- 1850-(time2-time1)
        rMult <- WaitForListKeyPressWithTimeout(["X"],remains,1)
        time3 <- GetTime()
        Wait(1850 - (time3 - time1))

      } else {

        rMult <- WaitForListKeyPressWithTimeout(["X"],1850,1)
        time2 <- GetTime()
        r2 <- 0
        Wait(1850 - (time2- time1))
        time3 <- GetTime()
      }
      } else {

      ########################
      ########################
      ### Foil
      ###

	  DrawFoil()
      r1 <- WaitForListKeyPressWithTimeout(["X"],100,1)
      time1 <- GetTime()

      HideAll()
      if(r1 == 1) 
      {

        r2 <- WaitForListKeyPressWithTimeout(["X"],1850,1)
        time2 <- GetTime()
        remains <- 1850-(time2-time1)

        rMult <- WaitForListKeyPressWithTimeout(["X"],remains,1)
        time3 <- GetTime()
        Wait(1850 - (time3-time1))

      } else {
        ## A response was made in phase 1.
        rMult <- WaitForListKeyPressWithTimeout(["X"],1850,1)
        time2 <- GetTime()
        r2 <- 0
        Wait(1850 - (time2-time1))
        time3 <- GetTime()
      }


      }

     rt <- -1
     responded <- (1-r1) or (1-r2)
     mult <- 1-rMult 

     ##if r1 == 0, the key was struck during stimulus presentation.
     if (r1 == 0)
     {
      toofast <- 1
      rt <- (time1 - timeStart)

     } else {
      if(responded)
      {      
        rt <- time2 - timeStart
        toofast <- rt < 120
      } else {

        toofast <- 0
      }

     }

     corr <- (i == responded)
     Print(gSubNum + "   " + trialnum + "     " + i + "    " + toofast + "       " +  responded + "         " + corr + "    " + mult + "    " + timeStart + " " + rt)

     ##Now, update counters/structures. based on the stats

   if(half == 1)
   {

      totalTrials1 <- totalTrials1 + 1
      ## i indicates target/foil trial
      if(i)
      {
        corrTarg1 <- corrTarg1 + corr
      } else { 
        corrFoil1 <- corrFoil1 + corr
      }
 
      if(responded)
       {
         if(corr)
         {
           rtCorr1 <- Append(rtCorr1, rt)
         } else {
           rtInc1  <- Append(rtInc1, rt)
         }

         commissions1 <- commissions1 + (1-corr)
         multiples1   <- multiples1 + mult
         antic1       <- antic1 + toofast
       } else {

         ommissions1 <- ommissions1 + (1-corr)
       }
    

   } else {

      totalTrials2 <- totalTrials2 + 1
       ## i indicates target/foil trial
      if(i)
      {
        corrTarg2 <- corrTarg2 + corr
      } else { 
        corrFoil2 <- corrFoil2 + corr
      }
 
      if(responded)
       {
         if(corr)
         {
           rtCorr2 <- Append(rtCorr2, rt)
         } else {
           rtInc2 <- Append(rtInc2, rt)
         }
         commissions2 <- commissions2 + (1-corr)
         multiples2   <- multiples1 + mult
         antic2       <- antic1 + toofast
       } else {

         ommissions1 <- ommissions1 + (1-corr)
       }
   }



    trialNum <- trialNum + 1
 }


##Print out report
   Print("---------------------------------------------------")
   Print("Variable           Half 1     Half 2     Pooled")
   Print("---------------------------------------------------")
   Print("Total Trials       " + totalTrials1 + "          " + totalTrials2  + "       " + (totalTrials1 + totalTrials2))
   Print("Correct Targets    " + corrTarg1 + "           " + corrTarg2  + "        " + (corrTarg1 + corrTarg2))
   Print("Correct Foils      " + corrFoil1 + "           " + corrFoil2  + "        " + (corrFoil1 + corrFoil2))
   Print("Correct Trials     " + (corrTarg1 + corrFoil1) + "           " + (corrTarg2 + corrFoil2) + "        " + (corrTarg1 + corrTarg2 + corrFoil1 + corrFoil2))
   Print("Commission Errors  " + commissions1 + "           " + commissions2 + "        " + (commissions1 + commissions2))
   Print("Ommission Errors   " + ommissions1  + "           " + ommissions2  + "        " + (ommissions1 + ommissions2))  
   Print("Correct RT Mean    " + Round(Mean(rtCorr1)) +   "        " + Round(Mean(rtCorr2)) +   "      " + Round(Mean(Merge(rtCorr1,rtCorr2))))
   Print("Error RT Mean      " + Round(Mean(rtInc1)) +   "        " + Round(Mean(rtInc2)) +   "      " + Round(Mean(Merge(rtInc1,rtInc2))))
   Print("RT Mean            " + Round(Mean(Merge(rtCorr1,rtInc1))) +   "        " + Round(Mean(Merge(rtCorr2,rtInc2))) +   "      " + Round(Mean(Flatten([rtCorr1,rtInc1, rtCorr2, rtInc2]))))
   Print("RT SD              " + Round(StdDev(Merge(rtCorr1,rtInc1))) +   "        " + Round(StdDev(Merge(rtCorr2,rtInc2))) +   "      " + Round(StdDev(Flatten([rtCorr1,rtInc1, rtCorr2, rtInc2]))))
   Print("Anticipations      " + antic1       + "            " + antic2       + "         " + (antic1 + antic2))
   Print("Multiple Responses " + multiples1   + "            " + multiples2   + "         " + (multiples1 + multiples2))
   Print("---------------------------------------------------")
   


   ##Now, show debriefing info.
   SetText(gInstructions, "Thank you for participating in the experiment.  You may now leave.  (Press secret key 'X' to finish experiment)")
   Show(gInstructions)
   Draw()
   WaitForKeyPress("X")
  
 }


##  This is a standard initializer function that sets up typical
##  objects used in experiments.
define Initialize()
{
  ##Initialize Window, etc.
  gWin <- MakeWindow("black")   
            
  ##Initialize Font and colors


   fg <- MakeColor("black")
   bg <- MakeColor("white")

   gInstructionsFont <- MakeFont("Vera.ttf",0,16, fg,bg,1)  
 
   ## Make and place the instruction box, then hide it  
   gInstructions <- MakeTextBox("", gInstructionsFont, 600,300)
   AddObject(gInstructions, gWin)
   Move(gInstructions, gVideoWidth/2-300, gVideoHeight/2-150)
   Hide(gInstructions)

 }


define DrawTarg()
{ 
   Show(gOuter)
   Show(gInnerTarg)
   Hide(gInnerFoil)
   Draw()
}


define DrawFoil()
{ 
   Show(gOuter)
   Hide(gInnerTarg)
   Show(gInnerFoil)
   Draw()
}

define HideAll()
{
   Hide(gOuter)
   Hide(gInnerTarg)
   Hide(gInnerFoil)
   Draw()
}