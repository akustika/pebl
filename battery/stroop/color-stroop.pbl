 #######################################################
 ##
 ## Color Stroop Task, with option for vocal response
 ##
 ## (c) 2011 Shane T. Mueller
 ## smueller at obereed dot net
 ## PEBL Color Stroop Task, Version 0.1
 ## 
 ## 
 ## Modeled to be roughly equivalent to the number stroop task
 ## also available via the PEBL Test Battery.
 ##
 ##
 ## By default, use only the ink-naming version, which
 ## requires suppressing the pre-potent reading response.


define Start(p)
{



   gVideoWidth <- 800
   gVideoHeight <- 600

   gStimSize <- 60 ##Stimulus size of font.


   ##
   ##  Options:

   ##  Set gResponseType to either "keyboard" or "audio" to change the
   ## response method
   ##
   ## gResponseType <- "keyboard"
   ## gResponseType <- "audio"


   Initialize()



   gResponseType <- GetEasyChoice("Select input type ",
                               ["1-2-3-4 Number Line on keyboard",
                               "Vocal input from microphone"],
                               ["keyboard","audio"], gWin)


   ##for audio, set this to 1 to score real-time with keyboard.  
   ##otherwise, you need to go back through and code responses afterward.
   gScoreRealtime <- 0


   ##Determine which conditions you want to use here:
   gUseHueNaming <- 1
   gUseWordReading <- 0

   gGiveFeedback <- 1  ##should you give feedback?  This will be reset later
                       ##to 0 for test trials, and 1 for practice trials.

   ## The voice key will trip when 55% of the last 
   ## gVoiceKeyDuration 1-ms bins are above the threshold.
   ## Based on input power and microphone noise, you may 
   ## need to adjust these parameters.
 
   gVoiceKeyThreshold <- .35
   gVoiceKeyDuration  <- 200

   ##Should the audio buffer be saved?
   gSaveAudio <- 1

   ##command to compress audio
   gCompressAudio <- 1
   gCompressor <- "oggenc "


   ## If set to 1, it will use the same sequence of stimuli every time.
   ## If set to 0, it will regenerate randomly on each run.
   usePreset <- 1
   
   gFixationTime <- 1000  #time for the fixation cross
   gResponseTimeout <- 3000 #Time limit given for responding

   ##Set gLanguage here to hard code
   gLanguage <- "EN"

   GetStrings(gLanguage)


   Print(GenerateStimuli(8,"color"))
   Print(GenerateStimuli(24,"color"))
   Print(GenerateStimuli(24,"color"))


   ##Enter the subject code here if one wasn't already provided.
   if(gSubNum == 0)
   {
     gSubNum <- GetSubNum(gWin)
   }

   
   MakeDirectory("data/"+gSubNum)

   gFileOut <- FileOpenWrite("data/"+gSubnum+"/colstroop-"+gResponseType+"-"+gSubNum+".csv")
   gPooledFileOut <- FileOpenAppend("data/colstroop-"+gResponseType+"-pooled.csv")
   gSumFileOut <- FileOpenWrite("data/" + gSubNum + "/colstroop-"+gResponseType+"-summary-" + gSubNum+".txt")
   gLog <- FileOpenAppend("data/colstroop-log.csv")


   ##Add headers onto files.
   flen <- Length(FileReadList("data/colstroop-"+gResponseType+"-pooled.csv"))
   if(flen==0)
    { 
      Print("empty pooled data file.  Adding header")
      FilePrint(gPooledFileOut, "subnum,response,code,block,trial,stim,cond,responded,response,correct,abstime,rt,speechduration,recordtime")
    }


    FilePrint(gFileOut, "subnum,response,code,block,trial,stim,cond,responded,response,correct,abstime,rt,speechduration,recordtime")



   FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+",NUMERICAL STROOP,"+gResponseType+",STARTED") 

   ##Create a vocal buffer if we have one

   if(gResponseType == "audio")
    {
	  Print("Making audio input buffer")
	  ##3000/3500 doesn't seem to work in linux:???
      gResponseBuffer <- MakeAudioInputBuffer(5000)
    }


  ###############################
  ## Create the basic stimuli
  ###############################

  ##This, by default, reads in a fixed
  block0 <- PracticeTrials(usepreset,"color")
  block1 <- Round1Trials(usepreset,"color")
  block2 <- Round2Trials(usepreset,"color")

  #################################
  ##Show the instructions.  
   gInstructions.text <- gInstructionsText
   Show(gInstructions)
   Hide(gHeader)
   Draw()
   WaitForAnyKeyPress()
   Hide(gInstructions)
   gHeader.text <- gPracticeHeaderText


   Show(gHeader)
   Draw()

   
   #Initialize data collectors
   gErr  <- []; gRT   <- []; gCond <- []

   gErrors          <- 0    ##All errors
   gCongruenceErrors <- 0    ##Errors indicating using the wrong dimension
   gRandomErrors    <- 0    ##Errors not attributable to incongruency


   gHeader.text <- gPracticeHeaderText

   #############################################
   ##Do the practice round
   ##
  gTrial <- 0
  gBlock <- 0
  gGiveFeedback <- 1

   loop(trial,block0)
   {
      DoTrial(trial,gResponseType,"data/"+gSubNum+"/trial-"+ZeroPad(gTrial,3)+"-")
      gTrial <- gTrial + 1
   }


   
   #ReInitialize data collectors after practice
   gErr  <- []; gRT   <- []; gCond <- []

   gErrors          <- 0    ##All errors
   gCongruentErrors <- 0    ##Errors indicating using the wrong dimension
   gRandomErrors    <- 0    ##Errors not attributable to incongruency

   gInstructions.text <- gBreak1Text
   Show(gInstructions)
   Hide(gFooter1);Hide(gFooter2)
   Draw()
   WaitForAnyKeyPress()
   Hide(gInstructions)
   Draw()
   gHeader.text <- gTestHeaderText

   gGiveFeedback <- 0

   gBlock <- 1
   ##Do Round 1
   ##
   loop(trial,block1)
   {
      DoTrial(trial,gResponseType,"data/"+gSubNum+"/trial-"+ZeroPad(gTrial,3)+"-")
	  gTrial <- gTrial + 1
   }


   gInstructions.text <- gBreak2Text
   Show(gInstructions)
   Hide(gFooter1);Hide(gFooter2)
   Draw()
   WaitForAnyKeyPress()
   Hide(gInstructions)
   Draw()
   gBlock <- 2
   ##Do Round 2
   ##
   loop(trial,block2)
   {
      DoTrial(trial,gResponseType,"data/"+gSubNum+"/trial-"+ZeroPad(gTrial,3)+"-")
	  gTrial <- gTrial + 1
   }

   ##These compute: condition,  length, median, mean, stdev
   statsCorr <- SummaryStats(gErr,gCond)
   statsRT <- SummaryStats(gRT,gCond)




   FilePrint(gSumFileOut,"------------------------------------------")
   FilePrint(gSumFileOut,"PEBL Numerical Stroop Task, Version 1.0")
   FilePrint(gSumFileOut,"http://pebl.sf.net")
   FilePrint(gSumFileOut,"Shane T. Mueller")
   FilePrint(gSumFileOut, GetPEBLVersion())
   FilePrint(gSumFileOut,"------------------------------------------")
   FilePrint(gSumFileOut, "Subject code: "+gSubNum)
   FilePrint(gSumFileOut, "Time:         "+TimeStamp())
   FilePrint(gSumFileOut, "Response condition: " + gResponseType)
   FilePrint(gSumFileOut,"------------------------------------------")

   FilePrint(gSumFileOut,"Total Errors:           "+gErrors)
   FilePrint(gSumFileOut,"Incongruency Errors:    "+gCongruenceErrors)
   FilePrint(gSumFileOut,"Random Errors:          "+gRandomErrors)
   FilePrint(gSumFileOut,"--------------------------------"+CR(2))
   FilePrint(gSumFileOut," [C]ongruent, [I]ncongruent, [N]eutral")
   FilePrint(gSumFileOut,"       Response time")
   FilePrint(gSumFileOut," Cond    Mean    N")
   FilePrint(gSumFileOut,"--------------------------------")

   loop(i,statsRT)
    {
	   FilePrint(gSumFileOut, "   "+ First(i)+ "      " +Nth(i,4) + "       " + Second(i))
    }

   FilePrint(gSumFileOut,"       Accuracy")
   FilePrint(gSumFileOut," Cond    Mean    N")
   FilePrint(gSumFileOut,"--------------------------------")
   loop(i,statsCorr)
    {
	   FilePrint(gSumFileOut, "   "+ First(i)+ "      " +Nth(i,4) + "       " + Second(i))
    }
  FilePrint(gSumFileOut,"--------------------------------")


   filesum <- FileOpenAppend("data/numstroop-sumall.csv")

   flen <- Length(FileReadList("data/numstroop-sumall.csv"))
   if(flen==0) 
    {
	    FilePrint(filesum,"sub,timestamp,response,duration,errors,congruence_errors,random_errors,RTC,RTI,RTN,AccC,AccI,AccN")
    }


   FilePrint(filesum, gSubNum + "," + TimeStamp() + "," +gResponseType+","+ GetTime()+"," + gErrors+ ","+ gCongruenceErrors+","+ gRandomErrors)
   loop(i,statsRT)
   {
    FilePrint_(filesum,","+Nth(i,4))
   }
   loop(i,statsCorr)
   {
    FilePrint_(filesum,","+Nth(i,4))
   }
    FilePrint(filesum,"")

   FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+","+"NUMERICAL STROOP,"+gResponseType+",ENDED") 
   MessageBox(gExitText,gWin)
}

###################################################
## basic function for a single trial

define DoTrial(stim,cond,code)
{

  ##stim has three values; 
  ##first is the condition
  ##second is the word to print
  ##third is the index of the color/font to use to print it.


   fname <- code + "-"+First(stim)+"-"+Second(stim)+"-"+Third(stim)+".wav"

   ##Condition is the response type.
   type <- First(stim)

   gFooter2.text <- gFooter2Text
  if(cond == "keyboard")
  {
   gFooter1.text <- gFooter1textManual
   Show(gFooter1)
   Show(gFooter2)
  } else{
   gFooter1.text <- gFooter1textVocal
   Show(gFooter1)
   Show(gFooter2)
  }


   gStimLabel.text <- "+"
   Show(gStimLabel)
   Draw()
   Wait(1000)


   gStimLabel.text <- Second(stim)
   gStimLabel.font <- Nth(gFonts,Third(stim))

   Draw()

   time1 <- GetTime()
   gStimLabel.font <- Nth(gFonts,5)
   if(cond == "keyboard")
    {


        resp <-WaitForListKeyPressWithTimeout(gKeys,2000,1)
        time2 <- GetTime()
	Print(resp)
         if(IsList(resp))   ##Check to see if there was a time-out.
           {
             gStimLabel.text <- "Too Slow"
             Draw()
             Wait(500)
             responded <- 0
	     corr <- 0
           } else{
             responded <- 1
             corr <- ToNumber(resp) == Third(stim)

	     if(gGiveFeedback)
	     {
	     if(corr)
	     {
     	       gStimLabel.text <-"Correct"
	     }else{
     	       gStimLabel.text <-"Incorrect"
	     }

	     Draw()
	     Wait(500)
	     
	     }
           }
             

           rt <-(time2-time1)
   
    	out <- gSubNum + "," + cond + "," + code + "," + gBlock +","+ gTrial + "," +
            Second(stim)+","+First(stim)+"," +responded+","+ resp + ","+corr+"," + time1 + ","+
			rt+ ",0"+ "," +(time2-time1)

    }elseif(cond=="audio")
    {
         Print("time1")
         resp0 <-  GetVocalResponseTime(gResponseBuffer,gVoiceKeyThreshold, gVoiceKeyDuration)
#        Wait(300)

        time2 <- GetTime()

        if(Third(resp0)==0)
         {
            gStimLabel.text <- "Too Slow"
            Draw()
            Wait(500)
         }

        rt <- First(resp0)
        endtime  <- Second(resp0)
	responded <- Third(resp0)

     if( gScoreRealtime )
      {
        gFooter1.text <- gFooter1textManual2
	Hide(gStimLabel)
        Draw()


        resp <-WaitForListKeyPress([1,2,3,4])
	corr <- ToNumber(resp)==length

      } else {
         #Use -1 as the non-score indicator.
         resp <- -1
	 corr <- -1
      }

    	out <- gSubNum + "," + cond + "," + code + "," + gBlock +","+ gTrial + "," +
            Second(stim)+","+First(stim)+"," +responded+","+ resp + ","+corr+"," + time1 + ","+
			rt + ","+(endtime-rt) + "," +(time2-time1)


	} else{
     SignalFatalError("Unknown response type: "+cond)
    }

    Hide(gStimLabel)
    Draw()

    if(cond=="audio" and gSaveAudio)
         {
            SaveAudioToWaveFile(fname,gResponseBuffer)		
 	if(gCompressAudio)
             {
			    SystemCall(gCompressor + fname)
				if(GetSystemType()=="LINUX" or GetSystemType()=="OSX")
             {
     				SystemCall("rm "+fname)
             } else {
     				SystemCall("del "+fname)
             }
	   }
         }
     

    FilePrint(gFileOut,out)
	FilePrint(gPooledFileOut,out)


    ##Update some counters:
    gErr <- Append(gErr,corr)
    gRT  <- Append(gRT, rt)
	gCond<- Append(gCond,First(stim))

	if(not corr)
        {
		   gErrors <- gErrors + 1
		   if(resp == (SubString(Second(stim),1,1)))
		    {
			   gCongruenceErrors <- gCongruenceErrors + 1
            }else{
               gRandomErrors <- gRandomErrors + 1
            }
        }
    Wait(500)

}



##
## 
define PrintMe(file,text)
{
  FilePrint(file,text)
  Print(text)
}

define PrintMe_(file,text)
{
  FilePrint_(file,text)
  Print_(text)

}




define PracticeTrials(usepreset,dim)
{ 
  if(usePreset)
   {
     ##Hardcode list here.
      if(dim=="color")
      {
      x <-[[I, yellow, 2], [N, when, 4], [C, green, 3], [N, hard, 1],
       [C, yellow, 4], [I, green, 2], [C, blue, 2], [N, and, 3],
        [I, blue, 3], [I, yellow, 3], [C, red, 1], [N, hard, 2],
	 [C, green, 3], [C, red, 1], [N, and, 1], [C, blue, 2],
	  [C, yellow, 4], [I, red, 3], [N, and, 4], [N, over, 2],
	   [I, green, 4], [N, when, 2], [I, yellow, 1], [I, red, 4]]
      }else{
       x <- GenerateStimuli(8,dim)
      }
   }else {
       x <- GenerateStimuli(8,dim)
   }
  Print(x)
  return x
}


define Round1Trials(usepreset,dim)
{
  if(usePreset)
   {
   if(dim=="color")
   {
    x <- [[I, green, 4], [C, blue, 2], [N, and, 4], [I, blue, 1], [I, green, 4], [N, and, 1], [N, and, 3], [N, hard, 1],
 [C, green, 3], [I, yellow, 1], [C, red, 1], [C, yellow, 4], [C, blue, 2], [I, red, 4], [C, green, 3], [C, red, 1],
 [N, hard, 2], [N, over, 1], [N, over, 4], [C, yellow, 4], [I, green, 2], [C, blue, 2], [N, hard, 2], [C, red, 1],
 [N, when, 4], [I, green, 1], [N, hard, 1], [N, hard, 4], [I, blue, 3], [N, when, 1], [I, green, 2], [C, red, 1],
 [I, blue, 4], [I, yellow, 1], [I, yellow, 3], [N, hard, 3], [C, yellow, 4], [C, green, 3], [I, red, 2], [N, when, 4],
 [C, red, 1], [N, when, 3], [N, over, 2], [N, and, 4], [I, yellow, 3], [C, green, 3], [I, red, 3], [I, red, 2],
 [N, over, 4], [C, yellow, 4], [N, hard, 4], [C, blue, 2], [I, blue, 3], [C, yellow, 4], [C, green, 3], [C, blue, 2],
 [N, when, 2], [N, when, 2], [I, yellow, 2], [I, red, 4], [N, and, 3], [I, green, 1], [I, blue, 1], [C, green, 3], 
 [I, red, 3], [I, blue, 4], [C, red, 1], [N, over, 3], [I, yellow, 2], [C, yellow, 4], [C, blue, 2], [N, and, 2]]
    } else {
     x <- GenerateStimuli(28,dim)
    }
   }else {
      x <- GenerateStimuli(28,dim)


   }
  return x
}


define Round2Trials(usepreset,dim)
{
  if(usePreset)
   
  {
   if(dim=="color")
   {
     x <- [[I, yellow, 3], [I, green, 2], [I, red, 2], [N, hard, 4], 
 [C, blue, 2], [I, yellow, 2], [N, when, 4], [N, when, 3], [N, and, 2],
 [I, green, 4], [I, yellow, 2], [I, blue, 4], [I, blue, 3],
 [I, green, 4], [I, blue, 1], [C, red, 1], [I, blue, 4],
 [N, and, 1], [N, over, 4], [C, yellow, 4], [C, blue, 2], [C, green, 3],
 [C, red, 1], [I, blue, 3], [C, green, 3], [I, green, 2],
 [C, blue, 2], [I, red, 4], [I, red, 3], [N, over, 4], [C, red, 1],
 [N, and, 3], [C, yellow, 4], [N, over, 3], [C, green, 3],
 [N, hard, 2], [C, blue, 2], [C, red, 1], [N, and, 2],
 [C, green, 3], [I, blue, 1], [N, and, 3], [N, when, 2],
 [C, yellow, 4], [N, hard, 2], [N, over, 1], [I, green, 1],
 [C, blue, 2], [I, yellow, 3], [I, yellow, 1], [I, green, 1],
 [C, red, 1], [I, red, 4], [I, yellow, 1], [N, hard, 3],
 [N, when, 1], [C, green, 3], [C, red, 1], [C, yellow, 4],
 [C, yellow, 4], [I, red, 3], [N, over, 2], [N, when, 1],
 [I, red, 2], [N, hard, 1], [C, yellow, 4], [N, and, 1],
 [C, blue, 2], [N, hard, 1], [N, and, 4], [C, green, 3], [N, over, 2]]
   }else{
      x <- GenerateStimuli(28,dim)
   }
   }else {
      x <- GenerateStimuli(28,dim)

   }
  return x
} 

##create a shuffled set of stimuli with
##num stimili from each of the three sets.
define GenerateStimuli(num,responsedim)
{

   ##This returns a list of triplets;
   ##the first is the condition (cong, neut, incong)
   ##the second is the word
   ##the third is the color id (element of gColors, where 5 indicates black)

   ##We need neutral, congruent, and incongruent stimuli here.


   ##Generate stimili for a word reading condition.     
   if(responseDim == "word")
    {
      
	congbase <- Transpose([gColorNames,[1,2,3,4]])
	neutbase <- Transpose([gColorNames, Repeat(5,4)])	

	incongbase0 <- CrossFactorWithoutDuplicates([1,2,3,4])
 	incongbase <- []
	loop(i,incongbase0)
	{
	   incongbase <- Append(incongbase, [Nth(gColorNames,First(i)),
	   	                             Second(i)])
	}

    congruents <- RepeatEnough(congbase,num)	
    neutrals <- RepeatEnough(neutbase,num)
    incongruents <- RepeatEnough(incongbase,num)



   }elseif(responseDim=="color")
    {


	congbase <- Transpose([gColorNames,[1,2,3,4]])
	neutbase <- DesignFullCounterbalance(gNeutralNames,[1,2,3,4])

	incongbase0 <- CrossFactorWithoutDuplicates([1,2,3,4])
 	incongbase <- []
	loop(i,incongbase0)
	{
	   incongbase <- Append(incongbase,[ Nth(gColorNames,First(i)),
	   	                             Second(i)])
	}


    congruents <- RepeatEnough(congbase,num)	
    neutrals <- RepeatEnough(neutbase,num)
    incongruents <- RepeatEnough(incongbase,num)

      
    }else{
      SignalFatalError("Unknown responseDim type")
    }


   type <- Flatten([Repeat("N",num),Repeat("I",num),Repeat("C",num)])
   stimbase <- Transpose(FlattenN([neutrals,incongruents,congruents],1))

  return Shuffle(Transpose([type,First(stimbase),Second(stimbase)]))

}


##for now, assumes the tables are the same size
define PasteTables(tab1,tab2)
{
   a <- Transpose(tab1)
   b <- Transpose(tab2)

   return Transpose(Merge(a,b))
}







##  This is a standard initializer function that sets up typical
##  objects used in experiments.
define Initialize()
{
  
  ## Uncomment to eliminate busy-wait (mostly for older machines or
  ## laptops that might overheat.)
  gSleepEasy <- 1
  ##Initialize Window, etc.
  gWin <- MakeWindow("grey40")   


  ShowCursor(0)
  ##Initialize Font and colors

   gBG <- MakeColor("grey40")
   fg  <- MakeColor("black")

   


   gInstructionsFont <- MakeFont(gPEBLBaseFont,0,22, fg,MakeColor("white"),1)  
   gHeaderFont       <- MakeFont(gPEBLBaseFont, 0,20,fg,gBG,1)
   gStimFont         <- MakeFont(gPEBLBaseFont,0,60,fg,gBG,0)
 

   ## Make and place the instruction box, then hide it  
   gInstructions <- MakeTextBox("", gInstructionsFont, 600,400)
   AddObject(gInstructions, gWin)
   Move(gInstructions, gVideoWidth/2-300, 100)
   Hide(gInstructions)

   ## Make and hide a header label
   gHeader <- MakeLabel("",gStimFont)
   AddObject(gHeader,gWin)
   Move(gHeader, gVideoWidth/2, 50)
   Hide(gHeader)

   gStimLabel <- MakeLabel("",gStimFont)
   AddObject(gStimLabel,gWin)
   Move(gStimLabel, gVideoWidth/2, gVideoHeight/2)
   Hide(gStimLabel)
 
   gFooter1 <- MakeLabel("",gHeaderFont)
   AddObject(gFooter1,gWin)
   Move(gFooter1, gVideoWidth/2, gVideoHeight-150)
   Hide(gFooter1)

   gFooter2 <- MakeLabel("",gHeaderFont)
   AddObject(gFooter2,gWin)
   Move(gFooter2, gVideoWidth/2, gVideoHeight-100)
   Hide(gFooter2)

   if(not FileExists("data"))
    {
	   Print("Creating 'data' directory")
       MakeDirectory("data")

    } elseif(not IsDirectory("data"))
    {
       SignalFatalError("File named 'data' exists.  Remove so data directory can be created.")    
    }
}


define GetStrings(language)
{

##stimili are defined here because different languages may require different number or letter characters.
  
##Ignore the translation for now.


   gColorNames      <- ["red","blue","green","yellow"]
   gBlackName <- "black"
   gNeutralNames    <- ["when","hard","and","over"]


   if(gResponseType=="keyboard")
   {
     gKeys <- [1,2,3,4]
     keystring <-  "1 = red   2 = blue  3 = green  4 = yellow"
     }else{
      gKeys <- [1,2,3,4]
      keystring <- "Say 'red', 'blue', 'green', or 'yellow'"
   }

    gInstructionsBase<- "You are about to take part in an study in which you will be asked to determine how many characters are displayed on the computer screen.  There will either be one, two, or three characters.  Sometimes the characters will be letters, and other times they will be numbers. "

	gKeyManual <- "You will need to respond with the 1-2-3-4 keys on the "

	gKeyVocal <- "You will need to respond by saying the color of the written word, loudly and clearly, into the microphone."


if(gResponseType=="keyboard" )
  {
    gInstructionsText <- gInstructionsBase+gKeyManual
  }else{
    gInstructionsText <- gInstructionsBase+gKeyVocal
  }


    gBreak1Text <- "Practice is complete.  Now you will be tested for real.  Remember to answer as quickly and accurately as possible.  Press any key to begin."
    gBreak2Text <- "You may now take a short break.  When you resume, remember to  answer as quickly and accurately as possible.  Press any key to continue."

    gPracticeHeaderText <- "PRACTICE"
    gTestHeaderText    <-  "TEST"

    gFooter1TextManual <- "Press "+keystring+" for the color of the word"
    gFooter1TextManual2 <- "Press "+keystring+" or '5' for other error."
    gFooter1TextVocal <- "Say '"+keystring+"' for the number of characters that appear on the screen"
    gFooter2Text <-"Respond as quickly and accurately as possible."

    gExitText <-"You are now finished. Thank you for participating."
  

   gColorNames      <- ["red","blue","green","yellow"]
   gBlackName <- "black"
   gNeutralNames    <- ["when","hard","and","over"]
   gPEBLColorNames  <- ["red","navy","darkgreen","yellow1","black"]

   ##Create the actual colors to be used.
   gColors <- []
   loop(i,gPEBLColorNames)
   {
     gColors <- Append(gColors,MakeColor(i))
   }
   gBlack <- MakeColor("black")
   gBg <- MakeColor("grey")

   gFonts <- []
   loop(i,gColors)
   {
      gFonts <- Append(gFonts, MakeFont(gPEBLBaseFontMono, 0, gStimSize, i,gBg,0))
   }

    gPracticeHeaderText <- "PRACTICE"
    gTestHeaderText    <-  "TEST"
 }




## Repeat list enough times to make it length long.
## 
define RepeatEnough(list,length)
{
 
   l <- Length(list)
   times <- Ceiling(length/l)
   tmp <- FlattenN(ShuffleRepeat(list,times),1)

   return SubList(tmp,1,length)
}


