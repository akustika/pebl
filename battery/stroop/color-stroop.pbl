 #######################################################
 ##
 ## Color Stroop Task, with option for vocal response
 ##
 ## (c) 2011 Shane T. Mueller
 ## smueller at obereed dot net
 ## PEBL Color Stroop Task, Version 0.1
 ## 
 ## 
 ## Modeled to be roughly equivalent to the number stroop task
 ## also available via the PEBL Test Battery.
 ##
 ##
 ## This version uses only the ink-naming version, which
 ## requires suppressing the pre-potent reading response.
 ## the option to use verbal coding requires hand-coding of responses 
 ## for later scoring.

define Start(p)
{



   #gVideoWidth <- 800
   #gVideoHeight <- 600

   parpairs <- [["stimsize",60],         ##Stimulus size of font.
                ["responsetype","ask"],  ##"keyboard",  "audio", or  "ask"
		["scorerealtime",0],

                 ["usepreset",1],   ## If set to 1, it will use the same sequence of stimuli every time.
                                    ## If set to 0, it will regenerate randomly on each run.

                 ["fixationTime",1000],    #time for the fixation cross   
                 ["responseTimeout",3000], #Time limit given for responding

                ["UseHueNaming" ,1],     ##Determine which conditions you want to use here:
                ["UseWordReading", 0],
                ["GiveFeedback", 1],     ##should you give feedback?  This will be reset later
                                         ##to 0 for test trials, and 1 for practice trials.

                  ## The voice key will trip when 55% of the last 
                  ## gVoiceKeyDuration 1-ms bins are above the threshold.
                  ## Based on input power and microphone noise, you may 
                  ## need to adjust these parameters.
                ["voicekeythreshold",.35],
		["voiceKeyDuration", 200],
   		["saveAudio",1],   ##Should the audio buffer be saved?

   		["compressAudio", 0],   ##command to compress audio
   		["compressor","oggenc "]

               ]

   gParams<- CreateParameters(parpairs,gParamFile)

   gStimSize <- gParams.stimsize


   ##
   ##  Options:
   ##  Set gResponseType to either "keyboard" or "audio" to change the
   ## response method
   ##
   gResponseType <- gParams.responsetype

   Initialize()

   if(gSubNum +""=="0")
   {
     gSubNum <- GetSubNum(gWin)
   }

   
   if(gResponseType=="ask")
   {
     gResponseType <- GetEasyChoice("Select input type ",
                               ["1-2-3-4 Number Line on keyboard",
                               "Vocal input from microphone"],
                               ["keyboard","audio"], gWin)

   }

   ##for audio, set this to 1 to score real-time with keyboard.  
   ##otherwise, you need to go back through and code responses afterward.
   gScoreRealtime <- gParams.scorerealtime


   ##Determine which conditions you want to use here:
   gUseHueNaming <- gParams.usehuenaming
   gUseWordReading <- gParams.useWordReading

   ##should you give feedback?  This will be reset later
   ##to 0 for test trials, and 1 for practice trials.
   gGiveFeedback <- gParams.givefeedback



   ## The voice key will trip when 55% of the last 
   ## gVoiceKeyDuration 1-ms bins are above the threshold.
   ## Based on input power and microphone noise, you may 
   ## need to adjust these parameters.
 
   gVoiceKeyThreshold <- gParams.voicekeythreshold
   gVoiceKeyDuration  <- gParams.voicekeyduration

   ##Should the audio buffer be saved?
   gSaveAudio <- gParams.saveaudio

   ##command to compress audio
   gCompressAudio <- gParams.compressaudio
   gCompressor <- gParams.compressor


   ## If set to 1, it will use the same sequence of stimuli every time.
   ## If set to 0, it will regenerate randomly on each run.
   usePreset <- gParams.usepreset
   
   gFixationTime    <- gParams.fixationtime    #time for the fixation cross
   gResponseTimeout <- gParams.responsetimeout #Time limit given for responding

   ##Set gLanguage here to hard code

   GetStrings(gLanguage)
 

  gFileOut <- GetNewDataFile(gSubNum,gWin,"colstroop-"+gResponseType,
              "csv",  "subnum,response,code,block,trial,stim,cond,responded,response,correct,abstime,rt,speechduration,recordtime")

  gSumFileOut <- GetNewDataFile(gSubNum,gWin,
                    "colstroop-"+gResponseType+"-summary",
                     "txt","")


   gPooledFileOut <- FileOpenAppend("data/colstroop-"+gResponseType+"-pooled.csv")

   gLog <- FileOpenAppend("data/colstroop-log.csv")


   ##Add headers onto files.
   flen <- Length(FileReadList("data/colstroop-"+gResponseType+"-pooled.csv"))
   if(flen==0)
    { 
      Print("empty pooled data file.  Adding header")
      FilePrint(gPooledFileOut, "subnum,response,code,block,trial,stim,cond,responded,response,correct,abstime,rt,speechduration,recordtime")
    }




   FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+",NUMERICAL STROOP,"+gResponseType+",STARTED") 

   ##Create a vocal buffer if we have one

   if(gResponseType == "audio")
    {
       Print("Making audio input buffer")
       ##3000/3500 doesn't seem to work in linux:???
       gResponseBuffer <- MakeAudioInputBuffer(5000)
    }

  if(gResponseType == "keyboard")
   {
    DoPractice()
   }
  ###############################
  ## Create the basic stimuli
  ###############################

  ##This, by default, reads in a fixed
  block0 <- PracticeTrials(usepreset,"color")
  block1 <- Round1Trials(usepreset,"color")
  block2 <- Round2Trials(usepreset,"color")

  #################################
  ##Show the instructions.  
   gInstructions.text <- gInstructionsText
   Show(gInstructions)
   Hide(gHeader)
   Draw()
   WaitForAnyKeyPress()
   Hide(gInstructions)
   gHeader.text <- gPracticeHeaderText


   Show(gHeader)
   Draw()

   
   #Initialize data collectors
   gErr  <- []; gRT   <- []; gCond <- []

   gErrors          <- 0    ##All errors
   gCongruenceErrors <- 0    ##Errors indicating using the wrong dimension
   gRandomErrors    <- 0    ##Errors not attributable to incongruency


   gHeader.text <- gPracticeHeaderText

   #############################################
   ##Do the practice round
   ##
  gTrial <- 0
  gBlock <- 0
  gGiveFeedback <- 1

   loop(trial,block0)
   {
      DoTrial(trial,gResponseType,"data/"+gSubNum+"/trial-"+ZeroPad(gTrial,3)+"-")
      gTrial <- gTrial + 1
   }


   
   #ReInitialize data collectors after practice
   gErr  <- []; gRT   <- []; gCond <- []

   gErrors          <- 0    ##All errors
   gCongruentErrors <- 0    ##Errors indicating using the wrong dimension
   gRandomErrors    <- 0    ##Errors not attributable to incongruency

   gInstructions.text <- gBreak1Text
   Show(gInstructions)
   Hide(gFooter1);Hide(gFooter2);Hide(gFooter1a)
   Draw()
   WaitForAnyKeyPress()
   Hide(gInstructions)
   Draw()
   gHeader.text <- gTestHeaderText

   gGiveFeedback <- 0

   gBlock <- 1
   ##Do Round 1
   ##
   loop(trial,block1)
   {
      DoTrial(trial,gResponseType,"data/"+gSubNum+"/trial-"+ZeroPad(gTrial,3)+"-")
	  gTrial <- gTrial + 1
   }


   gInstructions.text <- gBreak2Text
   Show(gInstructions)
   Hide(gFooter1);Hide(gFooter2);Hide(gFooter1a)
   Draw()
   WaitForAnyKeyPress()
   Hide(gInstructions)
   Draw()

   if(gResponseType == "keyboard")
   {
    DoPractice()
   }

   gBlock <- 2
   ##Do Round 2
   ##
   loop(trial,block2)
   {
      DoTrial(trial,gResponseType,"data/"+gSubNum+"/trial-"+ZeroPad(gTrial,3)+"-")
      gTrial <- gTrial + 1
   }

   ##These compute: condition,  length, median, mean, stdev
   statsCorr <- SummaryStats(gErr,gCond)
   statsRT <- SummaryStats(gRT,gCond)




   FilePrint(gSumFileOut,"------------------------------------------")
   FilePrint(gSumFileOut,"PEBL Numerical Stroop Task, Version 1.0")
   FilePrint(gSumFileOut,"http://pebl.sf.net")
   FilePrint(gSumFileOut,"Shane T. Mueller")
   FilePrint(gSumFileOut, GetPEBLVersion())
   FilePrint(gSumFileOut,"------------------------------------------")
   FilePrint(gSumFileOut, "Subject code: "+gSubNum)
   FilePrint(gSumFileOut, "Time:         "+TimeStamp())
   FilePrint(gSumFileOut, "Response condition: " + gResponseType)
   FilePrint(gSumFileOut,"------------------------------------------")

   FilePrint(gSumFileOut,"Total Errors:           "+gErrors)
   FilePrint(gSumFileOut,"Incongruency Errors:    "+gCongruenceErrors)
   FilePrint(gSumFileOut,"Random Errors:          "+gRandomErrors)
   FilePrint(gSumFileOut,"--------------------------------"+CR(2))
   FilePrint(gSumFileOut," [C]ongruent, [I]ncongruent, [N]eutral")
   FilePrint(gSumFileOut,"       Response time")
   FilePrint(gSumFileOut," Cond    Mean    N")
   FilePrint(gSumFileOut,"--------------------------------")

   loop(i,statsRT)
    {
	   FilePrint(gSumFileOut, "   "+ First(i)+ "      " +Nth(i,4) + "       " + Second(i))
    }

   FilePrint(gSumFileOut,"       Accuracy")
   FilePrint(gSumFileOut," Cond    Mean    N")
   FilePrint(gSumFileOut,"--------------------------------")
   loop(i,statsCorr)
    {
	   FilePrint(gSumFileOut, "   "+ First(i)+ "      " +Nth(i,4) + "       " + Second(i))
    }
  FilePrint(gSumFileOut,"--------------------------------")


   filesum <- FileOpenAppend("data/numstroop-sumall.csv")

   flen <- Length(FileReadList("data/numstroop-sumall.csv"))
   if(flen==0) 
    {
	    FilePrint(filesum,"sub,timestamp,response,duration,errors,congruence_errors,random_errors,RTC,RTI,RTN,AccC,AccI,AccN")
    }


   FilePrint(filesum, gSubNum + "," + TimeStamp() + "," +gResponseType+","+ GetTime()+"," + gErrors+ ","+ gCongruenceErrors+","+ gRandomErrors)
   loop(i,statsRT)
   {
    FilePrint_(filesum,","+Nth(i,4))
   }
   loop(i,statsCorr)
   {
    FilePrint_(filesum,","+Nth(i,4))
   }
    FilePrint(filesum,"")

   FilePrint(gLog, gSubNum + "," + gLanguage + "," + TimeStamp()+","+"NUMERICAL STROOP,"+gResponseType+",ENDED") 
   MessageBox(gExitText,gWin)
}

###################################################
## basic function for a single trial

define DoTrial(stim,cond,code)
{

  ##stim has three values; 
  ##first is the condition
  ##second is the word to print
  ##third is the index of the color/font to use to print it.


   fname <- code + "-"+First(stim)+"-"+Second(stim)+"-"+Third(stim)+".wav"

   ##Condition is the response type.
   type <- First(stim)

   gFooter2.text <- gFooter2Text
  if(cond == "keyboard")
  {
   gFooter1.text <- gFooter1textManual
   gFooter1a.text <- gFooter1atextManual
   Show(gFooter1)
   Show(gFooter1a)
   Show(gFooter2)
  } else{
   gFooter1.text <- gFooter1textVocal
   gFooter1a.text <- gFooter1atextVocal
   Show(gFooter1)
   Show(gFooter1a)
   Show(gFooter2)
  }


   gStimLabel.text <- "+"
   Show(gStimLabel)
   Draw()
   Wait(1000)


   gStimLabel.text <- Second(stim)
   gStimLabel.font <- Nth(gFonts,Third(stim))

   Draw()

   time1 <- GetTime()
   gStimLabel.font <- Nth(gFonts,5)
   if(cond == "keyboard")
    {

        resp <-WaitForListKeyPressWithTimeout(gKeys,2000,1)
        time2 <- GetTime()

         if(IsList(resp))   ##Check to see if there was a time-out.
           {
             gStimLabel.text <- gTooslow
             Draw()
             Wait(500)
             responded <- 0
	     corr <- 0
           } else{
             responded <- 1
             corr <- ToNumber(resp) == Third(stim)

	     if(gGiveFeedback)
	     {
	     if(corr)
	     {
     	       gStimLabel.text <-gCorrect
	     }else{
     	       gStimLabel.text <-gIncorrect
	     }

	     Draw()
	     Wait(500)
	     
	     }
           }
             

           rt <-(time2-time1)
   
    	out <- gSubNum + "," + cond + "," + code + "," + gBlock +","+ gTrial + "," +
            Second(stim)+","+First(stim)+"," +responded+","+ resp + ","+corr+"," + time1 + ","+
			rt+ ",0"+ "," +(time2-time1)

    }elseif(cond=="audio")
    {

         resp0 <-  GetVocalResponseTime(gResponseBuffer,gVoiceKeyThreshold, gVoiceKeyDuration)
#        Wait(300)

        time2 <- GetTime()

        if(Third(resp0)==0)
         {
            gStimLabel.text <- "Too Slow"
            Draw()
            Wait(500)
         }

        rt <- First(resp0)
        endtime  <- Second(resp0)
	responded <- Third(resp0)

     if( gScoreRealtime )
      {
        gFooter1.text <- gFooter1textManual2
	gFooter1a.text <- gFooter1atextManual2
	Hide(gStimLabel)
        Draw()


        resp <-WaitForListKeyPress([1,2,3,4])
	corr <- ToNumber(resp)==length

      } else {
         #Use -1 as the non-score indicator.
         resp <- -1
	 corr <- -1
      }

    	out <- gSubNum + "," + cond + "," + code + "," + gBlock +","+ gTrial + "," +
            Second(stim)+","+First(stim)+"," +responded+","+ resp + ","+corr+"," + time1 + ","+
			rt + ","+(endtime-rt) + "," +(time2-time1)


	} else{
     SignalFatalError("Unknown response type: "+cond)
    }

    Hide(gStimLabel)
    Draw()

    if(cond=="audio" and gSaveAudio)
         {
            SaveAudioToWaveFile(fname,gResponseBuffer)		
 	if(gCompressAudio)
             {
			    SystemCall(gCompressor + fname,"")
				if(GetSystemType()=="LINUX" or GetSystemType()=="OSX")
             {
     				SystemCall("rm "+fname,"")
             } else {
     				SystemCall("del "+fname,"")
             }
	   }
         }
     

    FilePrint(gFileOut,out)
	FilePrint(gPooledFileOut,out)


    ##Update some counters:
    gErr <- Append(gErr,corr)
    gRT  <- Append(gRT, rt)
	gCond<- Append(gCond,First(stim))

	if(not corr)
        {
		   gErrors <- gErrors + 1
		   if(resp == (SubString(Second(stim),1,1)))
		    {
			   gCongruenceErrors <- gCongruenceErrors + 1
            }else{
               gRandomErrors <- gRandomErrors + 1
            }
        }
    Wait(500)

}



##
## 
define PrintMe(file,text)
{
  FilePrint(file,text)
  Print(text)
}

define PrintMe_(file,text)
{
  FilePrint_(file,text)
  Print_(text)

}




define PracticeTrials(usepreset,dim)
{ 
  if(usePreset)
   {


    red <- Nth(gColorNames,1)
    green <- Nth(gColorNames,2)
    blue <- Nth(gColorNames,3)
    yellow <- Nth(gColorNames,4)

   w1 <-Nth(gNeutralNames,1)
   w2 <-Nth(gNeutralNames,2)
   w3 <-Nth(gNeutralNames,3)
   w4 <-Nth(gNeutralNames,4)

     ##Hardcode list here.
     ##These lists determine the stimuli in the test; 
   ##the first is the condition (cong, neut, incong)
   ##the second is the word
   ##the third is the color id (element of gColors, where 5 indicates black)
      if(dim=="color")
      {
      x <-[["I",yellow,2],["N",w1,4],["C",green,3],["N",w2,1],
           ["C",yellow,4],["I",green,2],["C",blue,2],["N",w3,3],
           ["I",blue,3],["I",yellow,3],["C",red,1],["N",w2,2],
   	   ["C",green,3],["C",red,1],["N",w3,1],["C",blue,2],
	   ["C",yellow,4],["I",red,3],["N",w3,4],["N",w4,2],
	   ["I",green,4],["N",w1,2],["I",yellow,1],["I",red,4]]
      }else{
       x <- GenerateStimuli(8,dim)
      }
   }else {
       x <- GenerateStimuli(8,dim)
   }

  return x
}


define Round1Trials(usepreset,dim)
{
  if(usePreset)
   {

    red <- Nth(gColorNames,1)
    green <- Nth(gColorNames,2)
    blue <- Nth(gColorNames,3)
    yellow <- Nth(gColorNames,4)

   w1 <-Nth(gNeutralNames,1)
   w2 <-Nth(gNeutralNames,2)
   w3 <-Nth(gNeutralNames,3)
   w4 <-Nth(gNeutralNames,4)

   if(dim=="color")
   {
   ##the first is the condition (cong, neut, incong)
   ##the second is the word
   ##the third is the color id (element of gColors, where 5 indicates black)

    x <- [["I",green,4],["C",blue,2],["N",w3,4],["I",blue,1],["I",green,4],["N",w3,1],["N",w3,3],["N",w2,1],
          ["C",green,3],["I",yellow,1],["C",red,1],["C",yellow,4],["C",blue,2],["I",red,4],["C",green,3],["C",red,1],
          ["N",w2,2],["N",w4,1],["N",w4,4],["C",yellow,4],["I",green,2],["C",blue,2],["N",w2,2],["C",red,1],
          ["N",w1,4],["I",green,1],["N",w2,1],["N",w2,4],["I",blue,3],["N",w1,1],["I",green,2],["C",red,1],
          ["I",blue,4],["I",yellow,1],["I",yellow,3],["N",w2,3],["C",yellow,4],["C",green,3],["I",red,2],["N",w1,4],
          ["C",red,1],["N",w1,3],["N",w4,2],["N",w3,4],["I",yellow,3],["C",green,3],["I",red,3],["I",red,2],
          ["N",w4,4],["C",yellow,4],["N",w2,4],["C",blue,2],["I",blue,3],["C",yellow,4],["C",green,3],["C",blue,2],
          ["N",w1,2],["N",w1,2],["I",yellow,2],["I",red,4],["N",w3,3],["I",green,1],["I",blue,1],["C",green,3],
          ["I",red,3],["I",blue,4],["C",red,1],["N",w4,3],["I",yellow,2],["C",yellow,4],["C",blue,2],["N",w3,2]]
    } else {
     x <- GenerateStimuli(28,dim)
    }
   }else {
      x <- GenerateStimuli(28,dim)


   }
  return x
}


define Round2Trials(usepreset,dim)
{
  if(usePreset)
  
  {

    red <- Nth(gColorNames,1)
    green <- Nth(gColorNames,2)
    blue <- Nth(gColorNames,3)
    yellow <- Nth(gColorNames,4)

   w1 <-Nth(gNeutralNames,1)
   w2 <-Nth(gNeutralNames,2)
   w3 <-Nth(gNeutralNames,3)
   w4 <-Nth(gNeutralNames,4)

   if(dim=="color")
   {
   ##the first is the condition (cong, neut, incong)
   ##the second is the word
   ##the third is the color id (element of gColors, where 5 indicates black)

     x <- [["I",yellow,3],["I",green,2],["I",red,2],["N",w2,4],
 ["C",blue,2],["I",yellow,2],["N",w1,4],["N",w1,3],["N",w3,2],
 ["I",green,4],["I",yellow,2],["I",blue,4],["I",blue,3],
 ["I",green,4],["I",blue,1],["C",red,1],["I",blue,4],
 ["N",w3,1],["N",w4,4],["C",yellow,4],["C",blue,2],["C",green,3],
 ["C",red,1],["I",blue,3],["C",green,3],["I",green,2],
 ["C",blue,2],["I",red,4],["I",red,3],["N",w4,4],["C",red,1],
 ["N",w3,3],["C",yellow,4],["N",w4,3],["C",green,3],
 ["N",w2,2],["C",blue,2],["C",red,1],["N",w3,2],
 ["C",green,3],["I",blue,1],["N",w3,3],["N",w1,2],
 ["C",yellow,4],["N",w2,2],["N",w4,1],["I",green,1],
 ["C",blue,2],["I",yellow,3],["I",yellow,1],["I",green,1],
 ["C",red,1],["I",red,4],["I",yellow,1],["N",w2,3],
 ["N",w1,1],["C",green,3],["C",red,1],["C",yellow,4],
 ["C",yellow,4],["I",red,3],["N",w4,2],["N",w1,1],
 ["I",red,2],["N",w2,1],["C",yellow,4],["N",w3,1],
 ["C",blue,2],["N",w2,1],["N",w3,4],["C",green,3],["N",w4,2]] 

   }else{
      x <- GenerateStimuli(28,dim)
   }
   }else {
      x <- GenerateStimuli(28,dim)

   }
  return x
} 

##create a shuffled set of stimuli with
##num stimili from each of the three sets.
define GenerateStimuli(num,responsedim)
{

   ##This returns a list of triplets;
   ##the first is the condition (cong, neut, incong)
   ##the second is the word
   ##the third is the color id (element of gColors, where 5 indicates black)

   ##We need neutral, congruent, and incongruent stimuli here.


   ##Generate stimili for a word reading condition.     
   if(responseDim == "word")
    {
      
	congbase <- Transpose([gColorNames,[1,2,3,4]])
	neutbase <- Transpose([gColorNames, Repeat(5,4)])	

	incongbase0 <- CrossFactorWithoutDuplicates([1,2,3,4])
 	incongbase <- []
	loop(i,incongbase0)
	{
	   incongbase <- Append(incongbase, [Nth(gColorNames,First(i)),
	   	                             Second(i)])
	}

    congruents <- RepeatEnough(congbase,num)	
    neutrals <- RepeatEnough(neutbase,num)
    incongruents <- RepeatEnough(incongbase,num)



   }elseif(responseDim=="color")
    {


	congbase <- Transpose([gColorNames,[1,2,3,4]])
	neutbase <- DesignFullCounterbalance(gNeutralNames,[1,2,3,4])

	incongbase0 <- CrossFactorWithoutDuplicates([1,2,3,4])
 	incongbase <- []
	loop(i,incongbase0)
	{
	   incongbase <- Append(incongbase,[ Nth(gColorNames,First(i)),
	   	                             Second(i)])
	}


    congruents <- RepeatEnough(congbase,num)	
    neutrals <- RepeatEnough(neutbase,num)
    incongruents <- RepeatEnough(incongbase,num)

      
    }else{
      SignalFatalError("Unknown responseDim type")
    }


   type <- Flatten([Repeat("N",num),Repeat("I",num),Repeat("C",num)])
   stimbase <- Transpose(FlattenN([neutrals,incongruents,congruents],1))

  return Shuffle(Transpose([type,First(stimbase),Second(stimbase)]))

}


##for now, assumes the tables are the same size
define PasteTables(tab1,tab2)
{
   a <- Transpose(tab1)
   b <- Transpose(tab2)

   return Transpose(Merge(a,b))
}







##  This is a standard initializer function that sets up typical
##  objects used in experiments.
define Initialize()
{
  
  ## Uncomment to eliminate busy-wait (mostly for older machines or
  ## laptops that might overheat.)
  gSleepEasy <- 1
  ##Initialize Window, etc.
  gWin <- MakeWindow("grey40")   


  ShowCursor(0)
  ##Initialize Font and colors

   gBG <- MakeColor("grey40")
   fg  <- MakeColor("black")

   


   gInstructionsFont <- MakeFont(gPEBLBaseFont,0,22, fg,MakeColor("white"),1)  
   gHeaderFont       <- MakeFont(gPEBLBaseFont, 0,20,fg,gBG,1)
   gStimFont         <- MakeFont(gPEBLBaseFont,0,60,fg,gBG,0)
 

   ## Make and place the instruction box, then hide it  
   gInstructions <- MakeTextBox("", gInstructionsFont, 600,400)
   AddObject(gInstructions, gWin)
   Move(gInstructions, gVideoWidth/2-300, 100)
   Hide(gInstructions)

   ## Make and hide a header label
   gHeader <- MakeLabel("",gStimFont)
   AddObject(gHeader,gWin)
   Move(gHeader, gVideoWidth/2, 50)
   Hide(gHeader)

   gStimLabel <- MakeLabel("",gStimFont)
   AddObject(gStimLabel,gWin)
   Move(gStimLabel, gVideoWidth/2, gVideoHeight/2)
   Hide(gStimLabel)
 
   gFooter1 <- MakeLabel("",gHeaderFont)
   AddObject(gFooter1,gWin)
   Move(gFooter1, gVideoWidth/2, gVideoHeight-150)
   Hide(gFooter1)

   gFooter1a <- MakeLabel("",gHeaderFont)
   AddObject(gFooter1a,gWin)
   Move(gFooter1a,gVideoWidth/2,gVideoHeight-125)
   Hide(gFooter1a)

   gFooter2 <- MakeLabel("",gHeaderFont)
   AddObject(gFooter2,gWin)
   Move(gFooter2, gVideoWidth/2, gVideoHeight-100)
   Hide(gFooter2)

 if(not FileExists("data"))
    {
       Print("Creating 'data' directory")
       MakeDirectory("data")

    } elseif(not IsDirectory("data"))
    {
       SignalFatalError("File named 'data' exists.  Remove so data directory can be created.")    
    }
}


define GetStrings(language)
{

lang <- Uppercase(language)
##stimili are defined here because different languages may require different number or letter characters.

  #start with english for fallback, then redefine  for specific languages.


   ##Ignore the translation for now.
   gColorNames      <- ["red","blue","green","yellow"]
   gBlackName <- "black"
   gNeutralNames    <- ["when","hard","and","over"]

   gCorrect <- "Correct"
   gIncorrect <- "Incorrect"
   gTooSlow <- "Too slow"
   if(gResponseType=="keyboard")
   {
     gKeys <- [1,2,3,4]
     keystring <-  "1 = red   2 = blue  3 = green  4 = yellow"
     }else{
      gKeys <- [1,2,3,4]
      keystring <- "Say 'red', 'blue', 'green', or 'yellow'"
   }
  gPracticeText <- "Before we begin, take a moment to learn the mapping between colors and the keyboard numbers.  Press the numbers 1-4 consecutively to practice the responses, and space bar to begin the test."

    gInstructionsBase<- "You are about to take part in an study in which you will be asked to determine the color that written words appear in.  Sometimes, the words will be actual color names.  When this happens, try not to respond with the written color name, but only with the color of the word."

    gKeyManual <- "You will need to respond with the 1-2-3-4 keys on the top of the keyboard."

    gKeyVocal <- "You will need to respond by saying the color of the written word, loudly and clearly, into the microphone."


if(gResponseType=="keyboard" )
  {
    gInstructionsText <- gInstructionsBase+gKeyManual
  }else{
    gInstructionsText <- gInstructionsBase+gKeyVocal
  }


    gBreak1Text <- "Practice is complete.  Now you will be tested for real.  Remember to answer as quickly and accurately as possible.  Press any key to begin."
    gBreak2Text <- "You may now take a short break.  When you resume, remember to  answer as quickly and accurately as possible.  Press any key to continue."

    gPracticeHeaderText <- "PRACTICE"
    gTestHeaderText    <-  "TEST"

    gFooter1TextManual <- "Press "+keystring
    gFooter1aTextManual <- " for the color of the word"

    gFooter1TextManual2 <- "Press "+keystring
    gFooter1aTextManual2 <- "or '5' for other error."

    gFooter1TextVocal <- "Say '"+keystring+"'"
    gfooter1atextVocal <- "for the number of characters that appear on the screen"

    gFooter2Text <-"Respond as quickly and accurately as possible."

    gExitText <-"You are now finished. Thank you for participating."
  

   gColorNames      <- ["red","blue","green","yellow"]
   gBlackName <- "black"
   gNeutralNames    <- ["when","hard","and","over"]
   gPEBLColorNames  <- ["red","navy","darkgreen","yellow1","black"]

   ##Create the actual colors to be used.
   gColors <- []
   loop(i,gPEBLColorNames)
   {
     gColors <- Append(gColors,MakeColor(i))
   }
   gBlack <- MakeColor("black")
   gBg <- MakeColor("grey")

   gFonts <- []
   loop(i,gColors)
   {
      gFonts <- Append(gFonts, MakeFont(gPEBLBaseFontMono, 0, gStimSize, i,gBg,0))
   }

    gPracticeHeaderText <- "PRACTICE"
    gTestHeaderText    <-  "TEST"


  if(lang=="ES")
  {

   gCorrect <- "Correcto"
   gIncorrect <- "Incorrecto"
   gTooSlow <- "Demasiado lento"
   gColorNames      <- ["rojo","azul","verde","amarillo"]
   gBlackName <- "negro"
   gNeutralNames    <- ["cuando","dura","fin","sobre"]


   if(gResponseType=="keyboard")
   {
     gKeys <- [1,2,3,4]
     keystring <-  "1 = rojo   2 = azul  3 = verde  4 = amarillo"
     }else{
      gKeys <- [1,2,3,4]
      keystring <- "Decir 'rojo', 'azul', 'verde', o 'amarillo'"
   }

    gPracticeText <- "Antes de comenzar toma un momento para que aprendas la relación entre los colores y los números en el teclado que corresponden a cada uno. Presiona los números del 1 al 4 consecutivamente para practicar las respuestas y la barra de espacio para comenzar la prueba."

   gInstructionsBase<-  "Vas a realizar una prueba en la que determinarás el color con el que están escritas un grupo de palabras. En algunos casos las palabras serán nombres de colores. Debes evitar presionar el botón que corresponde con el nombre del color y responder solamente con el número del color con el que la palabra está coloreada."

   gKeyManual <- "Debes responder empleando los números 1-2-3-4  que aparecen en la parte superior del teclado."

    gKeyVocal <- "You will need to respond by saying the color of the written word, loudly and clearly, into the microphone."


if(gResponseType=="keyboard" )
  {
    gInstructionsText <- gInstructionsBase+gKeyManual
  }else{
    gInstructionsText <- gInstructionsBase+gKeyVocal
  }


    gBreak1Text <- "Ha concluido la práctica. Ahora responderás la prueba real. Recuerda responder lo más rápido y preciso que puedas. Presiona cualquier tecla para comenzar."

    gBreak2Text <- " Presiona cualquier tecla para comenzar."

    gPracticeHeaderText <- "PRÁCTICA"
    gTestHeaderText    <-  "PRUEBA"

    ##these are for experimenter labels.
    gFooter1TextManual <- "Presiona "+keystring
    gFooter1aTextManual <- " para el color de la palabrad"
    gFooter1TextManual2 <- " Presiona  "+keystring
    gFooter1aTextManual2 <- "or '5' for other error."

    gFooter1TextVocal <- "Say '"+keystring+"'"
    gfooter1atextVocal <- "for the number of characters that appear on the screen"

    gFooter2Text <-"Responder con rapidez y precisión."
    gExitText <-"You are now finished. Thank you for participating."
  
   ##these don't need to be translated:
   gPEBLColorNames  <- ["red","navy","darkgreen","yellow1","black"]

   ##Create the actual colors to be used.
   gColors <- []
   loop(i,gPEBLColorNames)
   {
     gColors <- Append(gColors,MakeColor(i))
   }
   gBlack <- MakeColor("black")
   gBg <- MakeColor("grey")

   gFonts <- []
   loop(i,gColors)
   {
      gFonts <- Append(gFonts, MakeFont(gPEBLBaseFontMono, 0, gStimSize, i,gBg,0))
   }

    gPracticeHeaderText <- "PRÁCTICA"
    gTestHeaderText    <-  "PRUEBA"

}elseif(lang=="IT")
  {

   gCorrect <- "Corretto"
   gIncorrect <- "scorretto"
   gTooSlow <- "Troppo lento"
   gColorNames      <- ["rosso","blu","verde","giallo"]
   gBlackName <- "nero"
   gNeutralNames    <- ["quando","duro","e","sopra"]


   if(gResponseType=="keyboard")
   {
     gKeys <- [1,2,3,4]
     keystring <-  "1 = rosso   2 = blu  3 = verde  4 = giallo"
     }else{
      gKeys <- [1,2,3,4]
      keystring <- "Say 'rosso', 'blu', 'verde', or 'giallo'"
   }

    gPracticeText <- "Prima di iniziare la prova, la preghiamo di prendersi un momento per imparare l'associazione tra i colori e i numeri della tastiera.  La prego di premere i numeri 1-4 uno dopo l'altro per esercitarsi con le risposte, e la barra spaziatrice per iniziare il test."

    gInstructionsBase<- "Sta per prendere parte ad una prova in cui le verrà chiesto di stabilire il colore in cui sono scritte le parole. Qualche volta, le parole saranno effettivamente nomi di colori. Quando ciò accadrà, La prego di provare a rispondere non leggendo il nome del colore scritto, bensì con il colore in cui è scritta la parola."

    gKeyManual <- " Per rispondere, la preghiamo di utilizzare i tasti 1-2-3-4 collocati lungo il bordo superiore della tastiera."

    gKeyVocal <- "You will need to respond by saying the color of the written word, loudly and clearly, into the microphone."


if(gResponseType=="keyboard" )
  {
    gInstructionsText <- gInstructionsBase+gKeyManual
  }else{
    gInstructionsText <- gInstructionsBase+gKeyVocal
  }


    gBreak1Text <- "L’allenamento è terminato. Ora cominceremo il test per davvero. Si ricordi di rispondere più velocemente e accuratamente possibile. Prema un tasto qualsiasi per cominciare."
    gBreak2Text <- "Ora può fare una breve pausa.  Quando ricomincerà, si ricordi di rispondere più velocemente e accuratamente possibile. Prema un tasto qualsiasi per cominciare."

    gPracticeHeaderText <- "ALLENAMENTO"
    gTestHeaderText    <-  "TEST"

    gFooter1TextManual <- "Prema "+keystring
    gFooter1aTextManual <- "per il colore della parola"

    gFooter1TextManual2 <- "Prema "+keystring
    gFooter1aTextManual2 <- "o '5' per altri errori."

    gFooter1TextVocal <- "Say '"+keystring+"'"
    gfooter1atextVocal <- "for the number of characters that appear on the screen"

    gFooter2Text <-"Risponda nel modo più veloce e preciso possibile. "

    gExitText <-"Ora ha finito. La ringraziamo per la sua partecipazione."
  





   ##these don't need to be translated:
   gPEBLColorNames  <- ["red","navy","darkgreen","yellow1","black"]

   ##Create the actual colors to be used.
   gColors <- []
   loop(i,gPEBLColorNames)
   {
     gColors <- Append(gColors,MakeColor(i))
   }
   gBlack <- MakeColor("black")
   gBg <- MakeColor("grey")

   gFonts <- []
   loop(i,gColors)
   {
      gFonts <- Append(gFonts, MakeFont(gPEBLBaseFontMono, 0, gStimSize, i,gBg,0))
   }


}elseif(lang=="KR")
{

   gColorNames      <- ["빨강","파랑","초록","노랑"]
   gBlackName <- "검정"
   gNeutralNames    <- ["언제","단단한","그리고","위에"]


   if(gResponseType=="keyboard")
   {
     gKeys <- [1,2,3,4]
     keystring <-  "1 = 빨강   2 = 파랑  3 = 초록  4 = 노랑"
     }else{
      gKeys <- [1,2,3,4]
      keystring <- "말하세요 '빨강', '파랑', '초록', or '노랑'"
   }

    gInstructionsBase<- "글자의 색깔을 맞추는 게임을 시작합니다. 쓰여진 단어의 색깔로 답하면 됩니다."
	
    gKeyManual <- "키보드의 1-2-3-4 키를 눌러서 답하십시오."
	
    gKeyVocal <- "마이크에 단어의 색깔을 크고 분명하게 발음해서 답하십시오."
	

if(gResponseType=="keyboard" )
  {
    gInstructionsText <- gInstructionsBase+gKeyManual
  }else{
    gInstructionsText <- gInstructionsBase+gKeyVocal
  }


    gBreak1Text <- "연습 게임이 끝났습니다. 이제 진짜 게임을 시작합니다. 최대한 빨리 대답해야 하는 것을 잊지마십시오. 시작하려면 아무 키나 누르십시오."
	gBreak2Text <- "짧은 휴식을 시작합니다. 게임을 다시 시작할때 최대한 빨리 대답하야 하는 것을 잊지마십시오. 시작하려면 아무 키나 누르십시오."
	
    gPracticeHeaderText <- "연습"
    gTestHeaderText    <-  "실전"

    gFooter1TextManual <- "누르십시오 "+keystring
    gFooter1aTextManual <- "단어의 색깔"

    gFooter1TextManual2 <- "누르십시오"+keystring
    gFooter1aTextManual2 <- "또는 '5' 다른 오류."

    gFooter1TextVocal <- "말하십시오 '"+keystring+"'"
    gfooter1atextVocal <- "화면에 나타난 단어의 숫자"

    gFooter2Text <-"최대한 정확하고 빠르게 대답하십시오."
	
    gExitText <-"게임이 끝났습니다. 참여해 주셔서 감사합니다."
  


   ##Do not translate these:
   gPEBLColorNames  <- ["red","navy","darkgreen","yellow1","black"]

   ##Create the actual colors to be used.
   gColors <- []
   loop(i,gPEBLColorNames)
   {
     gColors <- Append(gColors,MakeColor(i))
   }
   gBlack <- MakeColor("black")
   gBg <- MakeColor("grey")

   gFonts <- []
   loop(i,gColors)
   {
      gFonts <- Append(gFonts, MakeFont(gPEBLBaseFontMono, 0, gStimSize, i,gBg,0))
   }

    gPracticeHeaderText <- "PRACTICE"
    gTestHeaderText    <-  "TEST"
 }



}



## Repeat list enough times to make it length long.
## 
define RepeatEnough(list,length)
{
 
   l <- Length(list)
   times <- Ceiling(length/l)
   tmp <- FlattenN(ShuffleRepeat(list,times),1)

   return SubList(tmp,1,length)
}


define DoPractice()
{
   ##Do the practice here:
   ##Lets do a little learning about the key mappings
   instructions <- EasyTextBox(gPracticeText,
                   10,10,gWin,28,gVideoWidth-20,200)

    Show(instructions) 
    Show(gFooter1)
    Show(gFooter2) 
    patch <- Rectangle(gVideoWidth/2,gVideoHeight/2+60,300,100,MakeColor("black"),1)
    AddObject(patch,gWin)
    Draw()
    resp <- 1
    patch.color <- gblack
    Draw()
    tmp <- EasyLabel("",gVideoWidth/2,gVideoHeight/2+60,gWin,50)
    while(not (resp == 5))
      {


         resp <- WaitForIt(["1","2","3","4"," "])
	 if(resp != 5)
          {
            patch.color <-Nth(gColors, resp)
	    tmp.text <- Nth(gColorNames,resp)
            Draw()
           }
      }

  
}



define ChooseColor(name)
{
   if(name == "black") {col <- gBlack}
   if(name == "blue")  {col <- gBlue}
   if(name == "red")   {col <- gRed}
   if(name == "green") {col <- gGreen}
   if(name == "yellow"){col <- gYellow}

  return col
}



##This enables using other keys to do input.
##it takes a list of keys, and returns the relative index.
define WaitForIt(keylist)
{
   code <- Sequence(1,Length(keylist),1)
   
   resp <- (WaitForListKeyPress(keylist))
   outid <- 0
   loop(i,Transpose([keylist,code]))
    {
       if(Uppercase(resp) == Uppercase(First(i)))
       {
	    outid <- Second(i)
	    break
       }
    }

   return (outid)
}
