## User notes:
## to match Miyake, offset should be 3.4 inches, with participants 18 inches from monitor.
##
##Note that with 4 options, guessing is 25%, but if you cheat,
##and look to only one side, you can get close to 62%.  You may be able to detect this 
##with left vs right, but if they split LR you wouldn't.
## Thus, you should monitor eye fixations, and make the task easy enough
## that accuracy is above 65% by adjusting offset or timing.

## Here are instructions from Miyake et al, from which this task is based.
##
##Antisaccade task. During each trial of the antisaccade task (adapted from Roberts, Hager,
##& Heron, 1994), a fixation point was first presented in the middle of the computer screen for
##a variable amount of time (one of nine times between 1500 and 3500 ms in 250-ms intervals).
##A visual cue (0.4°) was then presented on one side of the screen (e.g., left) for 225 ms, followed
##by the presentation of a target stimulus (2.0°) on the opposite side (e.g., right) for 150 ms
##before being masked by gray cross-hatching. The visual cue was a black square, and the target
##stimulus consisted of an arrow inside an open square. The participants’ task was to indicate
##the direction of the arrow (left, up, or right) with a button press response. Given that the
##arrow appeared for only 150 ms before being masked, participants were required to inhibit
##the reflexive response of looking at the initial cue (a small black square) because doing so
##would make it difficult to correctly identify the direction of the arrow. The cues and targets
##were both presented 3.4 in. away from the fixation point (on opposite sides) and the participants
##were seated 18 in. from the computer monitor (thus, the total subtended visual angle from cue
##to target was approximately 21.4°). The participants practiced on 22 trials and then received 90
##target trials. The proportion of target trials answered correctly served as the dependent measure.


define Start(p)
{

   parpairs <- [["stimsize",35], ##size of arrow box or prompt box.
                ["offset",200],  ##distance to target/prompt
		["promptdelay",250],  ##time between prompt and arrow
		["stimduration",175],##Time the arrow appear
		["numPractice",22],
		["numtrials",90],
		["usedown",1]]  ##although miyake did not use this, up can be more easily discriminated from lr without a D

   gparams <- CreateParameters(parpairs,gParamFile)
   gSleepEasy <- 1   
   gWin <- MakeWindow("black")
   if(gSubNum+""=="0")
    {
     gSubNum <- GetSubNum(gWin)
    }

   MakeDirectory("data")

   gFileOut <- GetNewDataFile(gSubNum,gWin,"antisaccade","csv",
    "subnum,block,trial,direction,stim,fixationstart,delaytime,promptstart,arrowstart,maskstart,rt,corresp,resp,corr,bivalentcorr")

   reportFile <- GetNewDataFile(gSubNum,gWin,"antisaccade-report","txt","")


  gColor <- MakeColor("white")

  ##Let's create the fixation, cue square, and arrow stimuli.

  gPrompt <- Square(gVideoWidth/2,gVideoHeight/2,gParams.stimsize,gColor,0)
  gUp <- Arrow("U",gColor)
  gDown <- Arrow("D",gColor)
  gLeft <- Arrow("L",gColor)
  gRight <- Arrow("R",gColor)
  gFixation  <- Plus(gVideoWidth/2,gVideoheight/2,15,2,gColor)
  gMask <- MakeMask(gColor)

  AddObject(gPrompt,gWin); Hide(gPrompt)
  AddObject(gUp,gWin); Hide(gUp)
  AddObject(gLeft,gWin);   Hide(gLeft)
  AddObject(gRight,gWin);   Hide(gRight)
  AddObject(gDown,gWin);   Hide(gDown)

  AddObject(gFixation,gWin);   Hide(gFixation)
  AddObject(gMask,gWin);   Hide(gMask)

  footer <- Easylabel("Use arrow keys to indicate direction of arrow",gVideoWidth/2,gVideoHeight-150,gWin,30)

  if(gParams.usedown)
  {
    gStim <- ["L","R","U","D"]
    gKeys <- ["<left>","<right>","<up>","<down>"]
  }else{
    gStim <- ["L","R","U"]
    gKeys <- ["<left>","<right>","<up>"]
  }


  MessageBox("In this task, you will try to see the direction an arrow is facing.  Each trial will start with a cross at the center of the screen.  Then, a square will appear either on the left or right side of the screen.  DO NOT LOOK AT THE FIRST SQUARE.  Shortly after the square appears, another square will appear on the opposite side of the screen containing an arrow.  This arrow will either be facing left, right, up, or down.  Shortly after the arrow appears, it will disappear and be replaced by a small hashed square.  Try very hard to look to where the square will be, and not where the first square is.  We will start with a few trials where it is easy to see the targets. To respond, use the arrow keys on the keyboard to indicate the direction of the arrow.",gWin)  
  ShowCursor(0)
  trial <- 0
  block <- "P"

  loop(i,Sequence(1,10,1))
   {
      direction <- Sample([-1,1])
      stim <- Sample(gStim)
      out <-  Trial(direction,stim,500,500)
      FilePrint_(gFileOut,gSubNum+","+block+ ","+trial+","+direction+","+stim)
      loop(j,out)
      {
        FilePrint_(gFileOut,","+j)
      }
      FilePrint(gFileOut,"")
   }    

  MessageBox("Now we will do a practice block that will be more difficult. The arrow will appear immediately after the first square, and disappear very quickly.  In order to see the arrow, you must try to not look at the first square, and instead glance toward where the arrow will be.",gWin)
  ShowCursor(0)
  loop(i,Sequence(1,gParams.numpractice,1))
   {
      direction <- Sample([-1,1])
      stim <- Sample(gStim)
      out <-  Trial(direction,stim,gParams.promptdelay,gParams.stimduration)
      FilePrint_(gFileOut,gSubNum+","+block+ ","+trial+","+direction+","+stim)
      loop(j,out)
      {
        FilePrint_(gFileOut,","+j)
      }
      FilePrint(gFileOut,"")
   }    

  MessageBox("Now, your responses will count for real. Try to answer as accurately as you can. Press OK to begin.",gWin)
  ShowCursor(0)
  trial <- 1
  block <- "T"
  data <- []
  loop(i,Sequence(1,gParams.numtrials,1))
  { 
      direction <- Sample([-1,1])
      stim <- Sample(gStim)
      out <-  Trial(direction,stim,gParams.promptdelay,gParams.stimduration)
      PushOnEnd(data,out)


      FilePrint_(gFileOut,gSubNum+","+block+ ","+trial+","+direction+","+stim)
      loop(j,out)
      {
        FilePrint_(gFileOut,","+j)
      }
      FilePrint(gFileOut,"")
      trial <- trial + 1
   }    
   tdat <- Transpose(data)
   correct <- Mean(Nth(tdat,9))
   correctBi <- Mean(Nth(tdat,10))
   meanRT <- Mean(Nth(tdat,6))

   FilePrint(reportFile,"PEBL Anti-saccade task result summary")
   FilePrint(reportfile,TimeStamp())
   FilePrint(reportfile,"Participant code:    "  + gSubNum)    
   FilePrint(reportfile,"Accuracy:            " + correct)
   FilePrint(reportfile,"Bivalent Accuracy:   " + correctBI)

   FilePrint(reportfile,"Response time:       " + meanRT)
   FilePrint(reportFile,"Note: Bivalent accuracy shows accuracy scored only for the correct direction (horizontal vs vertical).  Here, L is correct for either L or R.; etc.  Possibly, enough information is present to discriminate LR vs UD, but not between LR or UD."   )

   MessageBox("This test is now complete.  Your accuracy was "+Round(correct,3),gWin)

}



##side should be -1 or +1
##direction should be L, R, or U
define Trial(side, direction,promptdelay, stimduration)
{
 
    
    Show(gFixation)
    ##Move prompt to opposite side.
    Move(gPrompt, gVideoWidth/2- side * gparams.offset,gVideoHeight/2)

    arrow <- Lookup(direction,gStim,[gLeft,gRight,gUp,gDown])

    Move(arrow,gVideoWidth/2+side*gParams.offset,gVideoHeight/2)
    Move(gmask,gVideoWidth/2+side*gParams.offset,gVideoHeight/2)
    delay <- 1250 + 250 * RandomDiscrete(9)
    Hide(gPrompt)
    Hide(arrow)

    Draw()
    time0a <- GetTime()

    Wait(delay)
    Hide(gFixation)
    Show(gPrompt)
    Draw()
    time0b <- GetTime()
    Wait(promptdelay)
    Show(arrow)
    Draw()
    time0c <- GetTime()
    Wait(stimduration)
    Hide(arrow)
    Show(gMask)
    Draw()

    time1 <- GetTime()
    resp <-   WaitForListKeyPress(gKeys)
    time2 <- GetTime()

    
    correctresp <- Lookup(direction,gStim,gKeys)
    correct <- (correctresp == resp)

    ##score whether you got lr or ud correct (i.e. up response would be correct if it were either up or down.
    

    bivalentdir <- Lookup(direction,["L","R","U","D"],["h","h","v","v"])

    bivalentresp <- Lookup(resp,["<left>","<right>","<up>","<down>"],
                                ["h","h","v","v"])

    bivalentcorr <- (bivalentdir==bivalentresp)
    Hide(gMask)
    Draw()

    return [time0a,delay,time0b,time0c,time1,(time2-time1),correctresp,resp,correct,bivalentcorr]
}



##direction can be  "L" (left), "R" (right)
## or "U" indicating up, "D" indicating down


define Arrow(direction,fg)
{

    direction <- Uppercase(direction)

    xsize <- gParams.stimsize
    xmid <- Floor(xsize/2)+1
    color <- MakeColor("black")
    color.alpha <- 0

    canv <- MakeCanvas(xsize+2,xsize+2,color)
    border <- Square(xmid,xmid,xsize,fg,0)
    AddOBject(border,canv)
    Draw(border)


   if(direction=="U")
   { 
    xoff <- 0
    yoff <- -1

   }elseif(direction=="D")
   {
    xoff <- 0
    yoff <- 1

   }elseif(direction=="L")
   {
    xoff <- -1
    yoff <- 0

   }elseif(direction=="R")
   {

    xoff <- 1
    yoff <- 0

   }



 if(direction=="L" or direction=="R")
   {
     line <- Rectangle(xmid,xmid,xsize-14,2,fg,1)
   }else{
     line <- Rectangle(xmid,xmid,2,xsize-14,fg,1)
   }

   AddObject(line,canv)
   Draw(line)


    if(direction=="L"  or direction=="R")
    {
        trix <- [xoff*4,-xoff*4,-xoff*4]
    	triy <- [0,4,-4]
        head <- Polygon(xmid+xoff*(xsize/2-8),xmid,trix,triy,fg,1)

    }else{
        trix <- [0,4,-4]
    	triy <- [yoff*4,-yoff*4,-yoff*4]
        head <- Polygon(xmid,xmid+yoff*(xsize/2-8),trix,triy,fg,1)
    }

    AddObject(head,canv)
    Draw(head)

    return canv
}


define MakeMask(fg)
{
    xsize <- gParams.stimsize
    xmid <- Floor(xsize/2)+1
    color <- MakeColor("black")
    color.alpha <- 0

    canv <- MakeCanvas(xsize+2,xsize+2,color)
#    imprint <- Rectangle(xmid,xmid,xsize,xsize,fg,0)
#    AddOBject(imprint,canv)
#    Draw(imprint)
    
    hatchlr <- Line(0,0,xsize,0,fg)
    AddObject(hatchlr,canv)


    hatchud <- Line(0,0,0,xsize,fg)
    AddObject(hatchud,canv)



   jump <- (xsize)/6       
   loop(y, Sequence(xmid-xsize/2,xmid+xsize/2,jump))
     {

       hatchlr.y <- y
       hatchud.x <- y
       Draw(hatchlr)
       Draw(hatchud)
     }

  return canv
}
