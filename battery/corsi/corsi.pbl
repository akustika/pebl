define Start(p)
{


  
  gUseCorsiPoints <- 1        ## Use standard locations or regenerate
                              ## on each trial?


  ##By default, this uses Kessel's recommendations.  
  ##Basically, start at length 2, use 2 trials per length, and
  ##continue to the next length whenever at least one was recalled
  ##correctly.
 
  gUseKessel      <- 1        ## Use Kessel trials? (Should be used
                              ## with corsi points)


  ##alternately, you can generate the trials at random.

  gStartLength    <- 2        ## If gUseKessel <- 0, it creates a
                              ## random stimulus sequence with these parameters
  gEndLength      <- 9
  gTimesPerLength <- 2        ##


  gISI <- 1000                ## Inter-stimulus interval in ms
  gITI <- 1000                ## inter-trial interval.
  gWait <- 500                ## How long to 'go to each room'


  gStimColor <- MakeColor("navy")
  gHighlightColor <- MakeColor("khaki")


  gScale <- 3                 ##scale between mm and pixels.
  gTargetSize <- 30 * gScale
  gSleepEasy <- 1
  gWin <- MakeWindow("black")

  gHomeX <- gVideoWidth/2
  gHomeY <- gVideoHeight/2


  if(gSubNum==0)
   {
     gSubNum <- GetSubNum(gWin)
   }

  gFileOut <- FileOpenWrite("data/corsi-" + gSubNum + ".txt")
  gLogFile <- FileOpenAppend("data/corsi-log.txt")
#  ShowCursor(0)
  Draw()
  
  inst <- EasyTextBox("",50,50,gWin,20,700,500) 
  inst.text <- "You are about to take part in a test that measures your ability to remember a sequence of locations on the screen. You will see nine blue squares on the screen. On each trial, the squares will be lit up one at a time in sequence.  Remember the sequence.  When the sequence is finished, you need to click on each square IN THE SAME ORDER THEY WERE GIVEN.  When you are done, click the button labeled DONE.  If you cannot remember the order of squares, click them in as close the the original order as you can. 

You will start with a sequence of two squares, and you will get two tries for each sequence length.  The sequence will increase by one whenever you get at least one of the two sequences correct.
If you are correct, your next list will be one longer; otherwise it will be one word shorter.
  Click the mouse button when you are ready to begin."
  Draw()
   WaitForDownClick()

  gFont <- MakeFont(gPEBLBaseFont,1,25,MakeColor("black"),MakeColor("white"),1)
  gFont2 <- MakeFont(gPEBLBaseFont,0,20,MakeColor("black"),MakeColor("white"),1)


  if(gUseCorsiPoints)
   { 
      targxy <- CorsiPoints(75,30,gScale)
   } else {
      targxy <- MakePoints(100,gVideoWidth-100,70,gVideoHeight-100, gTargetSize*Sqrt(2),9)
   }




   gTrialnum <- 1
   Hide(inst)
   Draw()

   ## create the trial sequence, either from Kessels or 
   ## randomly.
   if(gUseKessel)
    {   
       trials <- KesselsTrials()
    } else {

       trials <- RandomTrials(gStartLength, gEndLength, gTimesPerLength)
    }


 ## Do three practice trials
#   Trial(targxy,[1,3,5])
#   Trial(targxy,[2,4,8])
#   Trial(targxy,[6,7,9])
 ##

 
   ##Go through the trial sequence
   dat <- []
   lastlength <- 0
   curcorrect <- 1
   totalcorrect <- 0
   totalrecalled <- 0

   loop(stim,trials)
   {
    
  if(gUseCorsiPoints)
   { 
      targxy <- CorsiPoints(75,30,gScale)
   } else {
      targxy <- MakePoints(100,gVideoWidth-100,70,gVideoHeight-100, gTargetSize*Sqrt(2),9)
   }

     curlength <- Length(stim)

       
     ## If you have switched lengths, make sure curcorrect>0; otherwise
     ## stop the test
     if(curlength > lastlength)
      {
        ##Abort if you finished a length and got none correct
        if(curcorrect ==0)
        {
          break
        }
  
        curcorrect <- 0
      }


     out  <-  Trial(targxy,stim)
     Print(out)
     corr <- First(out)
     scoreCI <- Second(out)
     inp <- Third(out)
     output <- Fourth(out)
     rts <- Fifth(out)

     dat <- Append(dat,[curlength,corr])
     curcorrect <- curcorrect + corr
     if(corr)
      {
        totalcorrect <- totalcorrect+1
        totalrecalled <- totalrecalled + curlength
      }

     out <- gSubNum + "," +curlength + ","
     lastlength <-curlength

   }


  if(curlength==9)
    { 
     msp <- 9 - (curcorrect<1)
    } else {
     msp <-  curlength -2
    }

   dat2 <- Transpose(dat)

#   totcor <- Sum(Second(Transpose(dat)))
   totalscore <- msp * totalcorrect



  Show(inst)
  inst.text <- "Thank you for participating.  Alert the Experimenter that you are done." +   CR(1)+
"Block Span:    "+msp +CR(1) + 
"Total Score:   "+totalscore+ CR(1) +
"Total Correct Trials: "+totalcorrect +CR(1)+
"Memory Span:   "+Round((2+totalcorrect)/2,2)
 
  Draw()

  WaitForAnyKeyPress()

}


define Trial(xy,stimseq)
{


  len <- Length(stimseq)

  ##Make a ready signal.
  warn <- EasyLabel("READY",gHomeX,gHomeY,gWin,30)
  Draw()
  Wait(gITI)
  Hide(warn)
  ShowCursor(0)
  Draw()
  

   squares <- []
  ##First, display the stimuli blocks
   loop(i, xy)
   {

      tmp <- Square(First(i),Second(i),gTargetSize,gStimColor,1)
	  AddObject(tmp,gWin)
      squares <- Append(squares,tmp)
   }
    

   Draw()
   Wait(gISI)

  ## Get the coordinates to present in order.
  seqxy <- ExtractListItems(xy,stimseq)	  

  xy1 <- First(seqxy)
  targ <- Square(First(xy1),Second(xy1),gTargetSize+3,gHighlightColor,1)
  Addobject(targ,gWin)

  loop(i,seqxy)
     {
       Move(targ,First(i),Second(i))
       Draw()
       Wait(gISI)
     }

  Hide(targ)
  Draw()



##Now, collect responses.
   done <- EasyLabel("DONE",gVideoWidth/2,gVideoHeight-20,gWin,33)
   doneback <-   Rectangle(gVideoWidth/2,gVideoHeight-20,120,30,MakeColor("white"),0)
   AddObject(doneback,gWin)
   SetMouseCursorPosition(Round(gVideoWidth/2),Round(gVideoHeight/2))
   ShowCursor(1)
   Draw()

   resps <- []
   rts <- []

   clickon <-  Merge([doneback],squares)
   ids <- Sequence(0,9,1)

   resp <- -1 
   while(resp != 0)
   {
      time1 <- GetTime()
      resp <-  WaitForClickOnTarget(clickon,ids)
      time2 <- GetTime()
      if(resp > 0)
      {
        pos <- Nth(clickon,resp+1)
        Move(targ,pos.x,pos.y)
        Show(targ)
        Draw()
        Wait(250)
        Hide(targ)
        Draw()
        resps <- Append(resps,resp)
        rts <- Append(rts,(time2-time1))
      }
   }


  score <- ScoreResponse(stimseq,resps) 
  ##Compute and give feedback
  corr <- ListEqual(stimseq,resps)
  if(corr)
   {
      warn.text <- "Correct"
   }else{   
      warn.text <- "Incorrect"
   }

  RemoveObjects(squares,gWin)
  RemoveObject(done,gWin)
  RemoveObject(doneback,gWin)
  RemoveObject(targ,gWin)

  Show(warn)
  Draw()
  Wait(500)

  RemoveObject(warn,gWin)
  Draw()
  return [corr,score,stimseq,resps,rts]
}


define ListEqual(l1,l2)
{
  if(Length(l1)==Length(l2))
  {
   same <- 1


   loop(i,Transpose([l1,l2]))
    {
     if(not (First(i) == Nth(i,2)))
      {
        same <- 0
      }

    }
   } else {
     same <- 0
   } 
  return same
}

##Gives a two-part score: # matches and # mismatches,
##position-wise, from the beginning

define ScoreResponse(l1,l2)
{
   ll1 <- Length(l1)
   ll2 <- Length(l2)

   min <- Min([ll1,ll2])
   max <- Max([ll1,ll2])

  ## If they are not the same length, we need to pad the shorter one.
  if(min < max)
  {
     if(ll1 < ll2)
      {   
        l1 <- Merge(l1, Repeat(-1,(max-min)))
      }else{
        l2 <- Merge(l2, Repeat(-1,(max-min)))
      }
  }  

  ##Now, l1 and l2 are the same length.

  same <- 0
  diff <- 0
  loop(i,Transpose([l1,l2]))
    {
     if(First(i) == Second(i))
      {
        same <- same + 1
      }else{
        diff <- diff +1 
      }

    }
  return [same,diff]
}




##This adapts WaitForClickOnTarget, making sure
##you click on a 'visible' target.

define WaitForResponse(targetlist,keylist)
{

  ret <- ""
  testlist <- Transpose([targetlist,keylist])
   
   wait1 <- 1
   while(wait1)
     {
      wait2 <- 1
      while(wait2)
       {
         pos <- WaitForMouseButton()
         if(Nth(pos,4)=="<pressed>")
          {
            wait2 <- 0
          }
       }

      newtargs <- []
	  
      loop(i,testlist)
          {
   		  ## Only allow clicks on visible targets
             obj <- First(i)

             if( obj.Visible and  Inside(pos,obj))
             {
			    wait1 <- 0
                ret <- Nth(i,2)
                break
             }

          }
     }
  return ret
}




define RemoveObjects(list,win)
{
   loop(i,list) 
   { 
     RemoveObject(i,win)
   }
}



define MakePoints(xmin, xmax, ymin, ymax, tol, num)
{

   ##should you watch the points evolve?
   watch <- 0
   

   ##Note that it is possible to arrange the situation 
   ## so that the distribution will never be satisfied.  So, lets
   ## set up a 'limit' at which point we give up and return the best
   ## we have so far.

   limit <- 100
 

  ## First, just initialize num points.
  pts <- []
  i <- 1
  while(i <= num)
   {

     x <- xmin + Random()*(xmax-xmin)
     y <- ymin + Random()*(ymax-ymin)
     pts <- Append(pts, [x,y])
     i <- i + 1
   }

  #Now, check for the minimum distance between two points.
   tries <- 1
   minpair <-  GetMinDist(pts)


   ##Move one point at a time
   while(First(minpair) < tol and tries < limit)
   {

     pt1id <- Nth(minpair,2)
     pt2id <- Nth(minpair,3)

	
     pt1 <- Nth(pts,pt1id)
     pt2 <- Nth(pts,pt2id)

    #resample the 'bad' points

     ##Half the time, try to move a little bit away from 
     ##the closest. Otherwise, do it randomly.

     if(0)
     {

       ##This doesn't seem to work.
       lastpt <- pt1       
       pt1 <- [-1,-1]
       while((First(lastpt) > xmin) and (First(lastpt)<xmax) and 
              (Second(lastpt) > ymin) and (Second(lastpt)<ymax))
         {
           #Resampling
           dist <- Random() * tol
           diff <- [First(pt2) - First(pt1),Second(pt2)-Second(pt1)]     
           pt1 <- VecSum(pt2,VecTimes(diff,[dist,dist]))
         }

        


     } else{
 
     pt1 <-   [ xmin + Random()*(xmax-xmin),
                  ymin + Random()*(ymax-ymin) ]

    }
   #   pt2 <-   [ xmin + Random()*(xmax-xmin),
   #                ymin + Random()*(ymax-ymin) ]


     ##Reassemble pts
     tmp <- RemoveSubset(pts,[pt1id])

     ##See if this configuration is an improvement
     testpts <- Merge(tmp,[pt1])
     minpairtest <-  GetMinDist(testpts)

     ##If we've made an improvement, use it, otherwise abandon it.
     if(First(minpairtest) >= First(minpair))
     {
        minpair <- minpairtest
        pts <- testpts
     }
     tries <- tries + 1

  
   }


  
  return Shuffle(pts)
}




# Points reported in: Kessels, R. P. C., van Zandvoort, M. J. E.,
# Postma, A., Kappelle, L. J., & de Haan, E. H. F. (2000). The Corsi
# Block-Tapping Task: Standardization and Normative Data. Applied
# Neuropsychology, 7(4), 252-258.
##scale: 30-mm blocks

define CorsiPoints(offx,offy,scale)
{


   x <- [[130,155],
         [30,145],
         [180,120],
         [70,110],
  	  	 [140,90],
         [195,60],
         [15,50],
         [75,20],
         [135,30] ]

   xx <- []
   loop(i,x)
   {
      xx <- Append(xx, [offx+First(i)*scale,offy+Second(i)*scale])
   }

  return xx
}




define GetMinDist(pts)
{
   len <- Length(pts)
   index1 <- 1
   mindist <- Dist(First(pts),Nth(pts,2))
   id1 <- 1
   id2 <- 2
 
   loop(i,pts)
   {
     pt1 <- i
     index2 <- index1 + 1
 

     if(index2 <= len)
      {
      rest <- SubList(pts,index2, Length(pts))
      loop(j, rest)
       { 
        d <- Dist(i,j)

        if(d < mindist)
        {
          mindist <- d
          id1 <- index1
          id2 <- index2
        }

        index2 <- index2 + 1
      }
      }
     index1  <- index1 + 1
   }

   return [mindist,id1,id2]
}



##  This function takes a list of anything, and a list of indexes
##  specifying the items to extract from the list.  The indexes can
##  be in any order, but the extracted list will be in the order 
##  of the original list.  Items that are not numbers less than or 
##  equal to the length of the list will be ignored.
define RemoveSubset(list, items)
{
   #Check the arguments to insure they are the proper type
    if(not IsList(list))
	{
	    SignalFatalError("First argument of function [RemoveSubset(<list>,<list>)] is not a list")
	}
    if(not IsList(items))
	{
	    SignalFatalError("First argument of function [RemoveSubset(<list>,<list>)] is not a list")
	}


    returnList <- []      #Make an initial blank list to return
    index <- 1            #keep track of the index
    loop(i, list)
    {
	#If the index is in the items list, add it to the return list
	if(not IsMember(index, items))
	{
	    returnList <- Append(returnList, i)
	}
	index <- index + 1
    }

    return returnList
}

define VecSum(a,b)
{
   tmp <- Transpose([a,b])
   out <- []
   loop(i,tmp)
   {
     out <- Append(out, First(i) + Nth(i,2))
   }
  return out
}

define VecTimes(a,b)
{
   tmp <- Transpose([a,b])
   out <- []
   loop(i,tmp)
   {
     out <- Append(out, First(i) * Nth(i,2))
   }
  return out
}

# Trials reported in: Kessels, R. P. C., van Zandvoort, M. J. E.,
# Postma, A., Kappelle, L. J., & de Haan, E. H. F. (2000). The Corsi
# Block-Tapping Task: Standardization and Normative Data. Applied
# Neuropsychology, 7(4), 252-258.
##scale: 30-mm blocks

define KesselsTrials()
{

  x <- [[8,5],
   [6,4],
   [4,7,2],
   [8,1,5],
   [3,4,1,7],
   [6,1,5,8],
   [5,2,1,8,6],
   [4,2,7,3,1],
   [3,9,2,4,8,7],
   [3,7,8,2,9,4],
   [5,9,1,7,4,2,8],
   [5,7,9,2,8,4,6],
   [5,8,1,9,2,6,4,7],
   [5,9,3,6,7,2,4,3],
   [5,3,8,7,1,2,4,6,9],
   [4,2,6,8,1,7,9,3,5]]
 
  return x
}


##This creates an increasing random sequence akin to Kessel
define RandomTrials(least, most, times)
  {
      trials <- []
      lens <- Sequence(least,most,1)
      loop(i,lens)
      {
        try <- 0    
        while(try <times)
         {
            trials <- Append(trials,SampleN(Sequence(1,9,1),i))
            try <- try + 1
         }
      }
    return trials
  }
