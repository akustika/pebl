#################################################################
##  PEBL Mental Rotation Task
## 
##  Version 0.2 (enables translations, fixes response error)
##
##  For use with PEBL 0.11 or later
##  http://pebl.sf.net
##  Part of  The PEBL Psychological Test Battery
##  2008 Released into Public Domain
##  by Shane T. Mueller, Ph.D. (smueller at obereed dot net)
##
##  This is the a demo of Shepard's mental rotation' task.
##  It currently has no instructions, and little instrumentation.
##  It is not yet meant for direct use in laboratories.
##
##  Thanks to Fatih ÖZDİNÇ for Turkish translation.
##
#################################################################

define Start(par)
{

  parpairs <- [["numrepeats",2],
               ["bgcolor","black"],
	       ["fgcolor","red4"],
	       ["xoffset",300]
               ]


  gParams <- CreateParameters(parpairs,"params/Rotation.pbl.par")

    ##Create a couple polygon stimuli. Specify others here:

      stim1 <- [[-20,  0,  0, 20,20, 0, 0,-20],
	  		 [-80,-80,10,10,80,80,30, 30]]

      stim2 <- [[-80, 80, 80,-50,-50,-80],
			 [-40,-40,-20,-20,40,40]]

     stims <- [stim1,stim2]




   ## Number of times through the design.
   numRepeats <- gParams.numrepeats

  ##gLanguage defaults to 'en', but can be set at command line.  
  ##using the --language flag, or via the launcher
   GetStrings(gLanguage)

  ##Set default video resolution.
#  gVideoWidth <- 800
#  gVideoHeight <- 600

 
  gSleepEasy <- 1

  win <- MakeWindow(gParams.bgcolor)

  if(gSubNum==0)
   {
     gSubNum <- GetSubNum(win)
   }


   inst <- gInstructions
   tb <-  EasyTextBox(inst,100,20,win,22, gVideoWidth-200,300)
  
  Draw()
  WaitForAnyKeyPress()
  Hide(tb)
  head <- EasyLabel(gHeader,gVideoWidth/2,gVideoHeight/2+200,win,22)
  Draw()
  

  MakeDirectory("data")
  fileout <- FileOpenWrite("data/rotate-"+gSubNum+".csv")
  data <- []




   gPI <- 3.14159

     ##Set up basic design:
     stim <- [1,2]
     angles <-[-3,-2,-1,0,1,2,3,4]
     condition <- [1,0]

      
     t1 <- DesignFullCounterbalance(stim,angles)
     t2 <- FoldList(FlattenN(DesignFullCounterbalance(t1,condition),2),3)

     trials <- Shuffle(RepeatList(t2,numRepeats))
     trialnum <- 1

    loop(i, trials)
     {

     stimid <-First(i)
     pts  <- Nth(stims,stimid)
     rot  <- Nth(i,2)
     cond <- Nth(i,3)

    fgcolor <- MakeColor(gParams.fgcolor)
     ##Pick a random base rotation.
     anglebase <- Random() * 2 *gPI

     stm<- RotatePoints(pts, anglebase)
     poly1 <- Polygon(gVideoWidth/2-gParams.xoffset/2,gVideoHeight/2,First(stm),Nth(stm,2),fgcolor,1)
     AddObject(poly1, win)

    ##Condition  1 is the reversed, where correct is "D".     
    if(cond == 1)
     {
      pts <- ReflectPoints(pts)
     }


    stm<- RotatePoints(pts,angleBase + gPI*rot/4)
    poly2 <- Polygon(gVideoWidth/2+gParams.xoffset/2,gVideoHeight/2,First(stm),Nth(stm,2),fgcolor,1)
    AddObject(poly2, win)
    Draw()
    t1 <- GetTime()


     resp <-  UpperCase(WaitForListKeyPress(["S","D"]))
#     resp <- Sample(["S","D"])  #this is a dummy-response

    t2 <- GetTime()

    cor <- ScoreTrial(resp,cond)

    FilePrint(fileout,gSubNum + "," + trialnum + "," + cond + "," + stimid +
               "," +  rot + "," + resp + "," + cor + "," + (t2-t1))


    data <- Append(data,[cond,rot,(t2-t1)])
    
    RemoveObject(poly1,win)
    RemoveObject(poly2,win)

    trialnum <- trialnum +1

    }

   dd <- Transpose(data)
   AggBy2(Nth(dd,3),Nth(dd,2),Nth(dd,1))

}


define AggBy2(val,c1,c2)
{
   valsort <- ListBy(val,c2)
   c1sort  <- ListBy(c1,c2)
   
   loop(i,Transpose([Nth(c1sort,1),
					Nth(c1sort,2),
                    Nth(valsort,2)]))
   {

     Print("Condition " + Nth(i,1))

     Print("-----------------------------------")
     Print("Angle  N    Median   Mean    SD")
     Print("-----------------------------------")
     PrintTable(1,Aggregate(Nth(i,3),Nth(i,2)))
     Print("-----------------------------------")

   } 
}

define PrintTable(file,table)
{
   loop(i,table)
   { 
       loop(j,i)
         {
            PrintMe_(file,Rnd(j,1) + Tab(1))
         }
      PrintMe(file,"")
   }
}

define PrintMe(file,val)
{
  Print(val)
}
define PrintMe_(file,val)
{
  Print_(val)
}

## This finds mean and SD RT for 
## each of the conditions specified in delays
##
define Aggregate(data, cond)
{
   
  agglom <- ListBy(data,cond)
  ## start by sorting both rts and delays by delays;
  ## then move through them and analyze subparts.


   stats <- []

   loop(i, Transpose(agglom))
   {
      icond <- Nth(i,1)
      ival <- Nth(i,2)

     stats <- Append(stats,
                [icond, Length(ival),
                 Med(ival), Mean(ival), StdDev(ival)])
   }

 return stats
}




define ScoreTrial(resp, cond)
{  
  ret <- 0 

  if (cond ==1)  
   {
     if(resp=="D") 
       {
         ret <- 1
       } 
 
   } else { 

     if(resp=="S") 
       {
         ret <- 1
       } 
   }

   return ret
}

#Compute median
define Med(list)
{
   if(Length(list) == 0 )
   { 
     ret <- "NA"
   } else {
     ret <- Median(list)
   }
  return ret
}

define Rnd(num,sig)
{
   x <-    Round( num *(10 ^ sig))/(10^sig)
   return x 
}


define GetStrings(language)
{
	lang <- Uppercase(language)
	if(lang == "TR") 
     {
       gInstructions <-  "Bu deneyde  iki nesnenin ayný olup olmadýðýna karar vereceksiniz. Bu nesneler diðerine göre faklý açýlarda döndürülecektir. Dödürülen nesnelerden bazýlarý ayný olurken bazýlarý ayna görüntüsü olacaktýr. Ayný olanlar için  'S';  farklý olanlar içi  'D' tuþuna basýnýz. "
	   gHeader <- "Ayný olanlar için  'S';  farklý olanlar içi  'D' tuþuna basýnýz. "

     } else{ 
	 ##default to english
       gInstructions <-  "In this task you will need to decide whether or not the two objects you see are identical.  They will be rotated with respect to one another, but some will be the same, and others will be mirror images. Press any key to begin."
	   gHeader <- "Press 'S' for same and 'D' for different"
     }
}
