
#################################################
##
##   PEBL's Tower of London Test
##
##   Version 0.2
##   Released Feb 2010
##
##

define Start(p)
{



  ##Should the problems get more difficult, or should they be random?
  progressiveDifficulty <- 0

  gNumDisks <- [2,3,4,5,6]  #Can be up to 6
  trialpercond <- 2
  gShowHand     <- 0  #Show the hand graphic?






  gSleepEasy <- 1
  Init()

  FilePrint(gFileOut,"sub trial size current end step abstime trialtime clicktime done")
  FilePrint(gFileOutSum,"sub trial size start end steps time")

  gInstructions.width <- 220
  gInstructions.height <- 500

  Move(gInstructions,555,50)
  gInstructions.text <- "Trial Complete. "+CR(2)+ "Click mouse to continue to the next trial."



  stim <- Flatten(Transpose(Repeat(gNumDisks,trialpercond)))
  if(not progressiveDifficulty)
  {
    stim <- Shuffle(stim)
  }

  trial  <- 1

  config1 <- ShuffleDisks(First(stim))
  config  <- ShuffleDisks(First(stim))


  loop(numdisks, stim)
  {

    ##Make sure the two stacks are not identical at outset:
    while(StackEqual(config1,config))
    {
      config1 <- ShuffleDisks(numdisks)
      config  <- ShuffleDisks(numdisks)
    }

    origstring <- MakeStateString(config)

    ## Make standard and new configurations
    c1 <- PlotDisksAnimate(config,0,450,gDisks,10)
    c2 <- PlotDisksAnimate(config1,0,130,gDisks2,10)
    Draw()
    WritePNG("tol-screen.png",gWin)
    startTime <- GetTime()
    lasttime <- GetTime()
    time <- GetTime()
    FilePrint(gfileout, gSubNum + " " + trial + " " + numdisks + " " +
                  MakeStateString(config) + " " +
                  MakeStateString(config1) + " 0 " + starttime + " 0 "+
                  (time - lasttime)  + " 0")
    #Allow disk moves until the two have identical configurations.
    continue <- 1
    step <- 1 

    while(continue)
    {

      config <- MoveDisk(config)
      time <- GetTime()
      FilePrint_(gfileout, gSubNum + " " + trial + " " + numdisks + " " +
              MakeStateString(config) + " " + MakeStateString(config1) + " " + 
                 step + " " + time +
                  " " + (time - starttime) +" " + (time-lasttime))

      lasttime <- time
      if(StackEqual(config,config1))
       {
         continue <- 0
         FilePrint(gfileout, " 1")
       } else {
         FilePrint(gfileout, " 0")
       }
    step <- step + 1 
   }
 

   FilePrint(gFileOutSum, gSubNum + " " + trial + " " + numdisks + " "+
              origstring  + " " +  MakeStateString(config1) + " " + (step-1) + " " + (time-starttime))

   RemoveObject(gInstructions,gWin)
   AddObject(gInstructions,gWin)
   Show(gInstructions)
   Draw()
   WaitForDownClick()
   Hide(gInstructions)
   HideAll()
   trial <- trial + 1
  }

   gInstructions.text <- "Thank you for participating. The experiment is now complete.  Press any key to exit."

   Show(gInstructions)
   Draw()
   WaitForAnyKeyPress()
}

define HideAll()
{
   loop(i, Merge(gDisks,gDisks2))
   {
     Hide(i)
   }
}

define Init()
{
  gVideoWidth <- 800
  gVideoHeight <- 600
#  ShowCursor(0)
  gWin <- MakeWindow("black")
 
  gSubNum <- GetSubNum(gWin)
  gFont <- MakeFont("Vera.ttf",0,22,MakeColor("white"),MakeColor("black"),1)
 
  gInstructions <- MakeTextBox("You are about to perform a task called the 'Tower of London'.  Your goal is to move a pile of disks from their original configuration to the configuration shown on the top of the screen.  You can only move one disk at a time.  To move a disk, click on the pile you want to move a disk off of, and it will move up into the hand.  Then, click on another pile, and the disk will move down to that pile.  Click the mouse to begin.",gFont,760,560)

  AddObject(gInstructions,gWin)
  Move(gInstructions,20,20)
  Draw()
  WaitForDownClick()
  Hide(gInstructions)
  Draw()

##Make hot zones fro each stack.
   r1 <-  Rectangle(220,385,110,185,MakeColor("grey20"),1)
   r2 <-  Rectangle(340,385,110,185,MakeColor("grey20"),1)
   r3 <-  Rectangle(460,385,110,185,MakeColor("grey20"),1)

   AddObject(r1,gWin)
   AddObject(r2,gWin)
   AddObject(r3,gWin)

  gZones <- [r1,r2,r3]

  gDisks <-  [MakeImage("png/disk1.png"),MakeImage("png/disk2.png"),
              MakeImage("png/disk3.png"),MakeImage("png/disk4.png"),
              MakeImage("png/disk5.png"),MakeImage("png/disk6.png")]
  gDisks2 <-  [MakeImage("png/disk1.png"),MakeImage("png/disk2.png"),
              MakeImage("png/disk3.png"),MakeImage("png/disk4.png"),
              MakeImage("png/disk5.png"),MakeImage("png/disk6.png")]

   if(gShowHand)
    {
     hand   <- MakeImage("png/hand.png")
     AddObject(hand,gWin)
     Move(hand,330,200)
    }
   rect <- Rectangle(330,80,380,140,MakeColor("grey20"),1)
   AddObject(rect,gWin)


   footerfont <-   MakeFont("Vera.ttf",0,22,MakeColor("grey"),MakeColor("black"),1)

   gFooter <- MakeLabel("Click on pile to pick up and drop disk",footerfont)
   AddObject(gFooter,gWin)
   Move(gFooter,300,490)

   gHeader <- MakeTextBox("Target
Stacks:",footerfont,100,70)
   AddObject(gHeader,gWin)
   Move(gHeader,30,50)
  ##Keep track of the image complex:
  gComplex <- []

  gFileOut <- FileOpenAppend("tol-"+gsubnum+".txt")
  gFileOutSum <- FileOpenAppend("tol-summary-"+gsubnum+".txt")

 }


define PlotDisks(config,inhand,ybase,disks)
{
  x <- 100
  complex <- []
  
  loop(column,config)
  {
    y <- ybase
    x <- x + 120
    loop(i,column)
    {
     disk <- Nth(disks,i)
     AddObject(disk,gWin)
     Move(disk,x, y) 
     Show(disk)
     y <- y - 25 
     complex <- Append(complex,disk)
    }
  }
 if(inhand >0)
  {
     Move(Nth(disks,inhand),320,200)
     AddObject(Nth(disks,inhand),gWin)
  }
 return  complex
}




define PlotDisksAnimate(config,inhand,ybase,disks,steps)
{

  if(inhand > 0)
   {
    diskIDs <- Flatten(Append(config,inhand))
   }else{
    diskIDs <- Flatten(config)
   } 



  disks2 <- SubSet(disks,Sort(diskIDs))  #Get the disks objects, in order

  

  startxy <- []
  loop(i, disks2)
   {
     startxy <- Append(startxy, [i.x,i.y])
   }

  x <- 100
  complex <- []
  

  ##Go through each column of the config string
  endxy <- []
  i <- 1
  loop(column,config)
  {
    y <- ybase
    x <- x + 120
    loop(i,column)
    {
     disk <- Nth(disks,i)
     AddObject(disk,gWin)
     Show(disk)

     pos <- [x,y]
     endxy <- Append(endxy,pos)
     y <- y - 25 
     complex <- Append(complex,disk)
    }

    i <- i + 1
  }
   if(inhand > 0 )
     {
       endXY <- Append(endXY, [320,200])
       disk <- Nth(disks,inhand)
       AddObject(disk,gWin)
       Show(disk)
     }
   endXY <- SortBy(endXY,diskIDs)
  startend <- Transpose([startxy, endxy])
  stepxy <- []

  loop(i, startend)
   {
      start <- First(i)
      end <- Second(i)
      stepxy <- Append(stepxy,[(First(end)-First(start))/steps,
                               (Second(end)-Second(start))/steps])
   }

  diskstep <- Transpose([disks2,startxy,stepxy])
  step <- 1
  while(step <= steps)
  {
    loop(i, diskstep)
     {
        disk <- First(i)
        start <- Second(i)
        diff <- Third(i)

        disk.x <- First(start) + First(diff) * step
        disk.y <- Second(start) + Second(diff) * step
    }

   Draw()          
   step <- step + 1
  }

 return  complex
}



define MoveDisk(config)
{

    first <- WaitForClickOnTarget(gZones, [1,2,3])
    x <- RemoveDisk(first,config)
 
    config <- First(x)
    disk <- Nth(x,2)

    if(disk != 0)
    {
      ##Remove the disk complex so it can be re-drawn
      RemoveComplex(gComplex)
	  gComplex <- PlotDisksAnimate(config,disk,450,gDisks,10)
      Draw()


      #Now, get the target pile 1-3
	  next <- WaitForClickOnTarget(gZones, [1,2,3])
      RemoveComplex(gComplex)
      config <- AddDisk(config,next,disk)
      gComplex <- PlotDisksAnimate(config,0,450,gDisks,5)
      Draw()
    }
   return config
}

define RemoveComplex(x)
{ 
    loop(i,x)
    {
       RemoveObject(i,gWin)
    }
}

##Returns a string describing a state of the problem
define MakeStateString(config)
{

  string <- "|"
  loop(i,config)
  {
    loop(j,i)
    {
      string <- string + j
    }
    string <- string + "|"
  }  

  return string
}

##This works just on the data structure, not on the display.
define RemoveDisk(col,ind)
{
##Removing:

   removed <- 0
   a <- 1
   newcomp <- []
   loop(i,ind)
   {

    if(a == col)
    {
      l <- Length(i)
      ## Remove the last element of the list, if it exists
      if(l == 0)
      { 
        newcomp <- Append(newcomp,[])
      } elseif(l==1){

        newcomp <- Append(newcomp,[])
        removed <- First(i)

      }else {

        ##
        newcomp <- Append(newcomp, SubList(i,1,l-1))
        removed <- Nth(i,l)

      }

    } else {
     newcomp <- Append(newcomp,i)
    }

	a <- a +1
   }

  return [newcomp,removed]
}


define AddDisk(config,nextcol,disk)
{

   a <- 1
   newcomp <- []
   loop(i,config)
   {
    if(a == nextcol)
    {
      newcomp <- Append(newcomp, Append(i,disk))

    } else {
     newcomp <- Append(newcomp,i)
    }

	a <- a +1
   }

  return newcomp
}


define ShuffleDisks(num)
{
  order <- Shuffle(Sequence(1,num,1))
  config <- [[],[],[]]
  loop(i,order)
   {
      stack <- RandomDiscrete(3)
      config <- AddDisk(config,stack,i)
   }


   return config
}


define StackEqual(stack1,stack2)
{
  equal <- 1

  loop(x,  Transpose([stack1,stack2]))
  {
     a <-  First(x)
     b <-  Nth(x,2)

    if(Length(a) == Length(b) )
       {
            loop(j,Transpose([a,b]))
            {
                if(First(j) != Nth(j,2))
                 {
                     equal <- 0
                 }
            }
 
       } else {
         equal <- 0
       }
  }
 return equal
}
