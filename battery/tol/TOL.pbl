define Start(p)
{

  gNumDisks <- 3
  numTrials <- 10


  Init()

  trial  <- 1
  while(trial <= numTrials)
  {
  config1 <- ShuffleDisks()
  config  <- ShuffleDisks()
 
  c1 <- PlotDisks(config,0,400,gDisks)
  c2 <- PlotDisks(config1,0,130,gDisks2)
  Draw()

  continue <- 1
  while(continue)
  {
     config <- MoveDisk(config)
     if(StackEqual(config,config1))
      {
         continue <- 0
      }
   }
   trial <- trial + 1
  }
}

define Init()
{
  gVideoWidth <- 640
  gVideoHeight <- 480
  ShowCursor(0)
  gWin <- MakeWindow()
 
  gFont <- MakeFont("Vera.ttf",0,22,MakeColor("black"),MakeColor("white"),1)
 
  gInstructions <- MakeTextBox("You are about to perform a task called the 'Tower of London'.  Your goal is to move a pile of disks from their original configuration to the configuration shown on the top of the screen.  You can only move one disk at a time.  To move a disk, press [1,2,3] to remove the top disk from a pile, then press [1, 2, or 3] again to place it on a new pile.",gFont,500,300)
  AddObject(gInstructions,gWin)
  Move(gInstructions,20,20)
  Draw()
  WaitForAnyKeyPress()
  Hide(gInstructions)
  Draw()



  gDisks <-  [MakeImage("png/disk1.png"),MakeImage("png/disk2.png"),
              MakeImage("png/disk3.png"),MakeImage("png/disk4.png"),
              MakeImage("png/disk5.png"),MakeImage("png/disk6.png")]
  gDisks2 <-  [MakeImage("png/disk1.png"),MakeImage("png/disk2.png"),
              MakeImage("png/disk3.png"),MakeImage("png/disk4.png"),
              MakeImage("png/disk5.png"),MakeImage("png/disk6.png")]

   hand   <- MakeImage("png/hand.png")
   AddObject(hand,gWin)
   Move(hand,300,200)

   rect <- Rectangle(300,80,320,140,MakeColor("black"),0)
   AddObject(rect,gWin)


   footerfont <-   MakeFont("VeraMono.ttf",0,22,MakeColor("black"),MakeColor("grey"),1)
   gFooter <- MakeLabel("Move disks:  [1]    [2]    [3]",footerfont)
   AddObject(gFooter,gWin)
   Move(gFooter,220,440)

   gHeader <- MakeTextBox("Target
Stacks:",footerfont,100,70)
   AddObject(gHeader,gWin)
   Move(gHeader,30,50)
  ##Keep track of the image complex:
  gComplex <- []

 }


define PlotDisks(config,inhand,ybase,disks)
{
  x <- 100
  complex <- []
  
  loop(column,config)
  {
    y <- ybase
    x <- x + 100
    loop(i,column)
    {
     disk <- Nth(disks,i)
     AddObject(disk,gWin)
     Move(disk,x, y) 
     Show(disk)
     y <- y - 25 
     complex <- Append(complex,disk)
    }
  }
 if(inhand >0)
  {
     Move(Nth(disks,inhand),300,200)
     AddObject(Nth(disks,inhand),gWin)
  }
 return  complex
}


define MoveDisk(config)
{
    first <- ToNumber(WaitForListKeyPress(["1","2","3"]))
    x <- RemoveDisk(first,config)
    config <- First(x)
    disk <- Nth(x,2)

    if(disk != 0)
    {
      ##Remove the disk complex so it can be re-drawn
      RemoveComplex(gComplex)
	  gComplex <- PlotDisks(config,disk,400,gDisks)
      Draw()

      #Now, get the target pile 1-3
      next <- ToNumber(WaitForListKeyPress(["1","2","3"]))
      RemoveComplex(gComplex)
      config <- AddDisk(config,next,disk)
      gComplex <- PlotDisks(config,0,400,gDisks)
      Draw()
    }
   return config
}

define RemoveComplex(x)
{ 
    loop(i,x)
    {
       RemoveObject(i,gWin)
    }
}



##This works just on the data structure, not on the display.
define RemoveDisk(col,ind)
{
##Removing:

   removed <- 0
   a <- 1
   newcomp <- []
   loop(i,ind)
   {

    if(a == col)
    {
      l <- Length(i)
      ## Remove the last element of the list, if it exists
      if(l == 0)
      { 
        newcomp <- Append(newcomp,[])
      } elseif(l==1){

        newcomp <- Append(newcomp,[])
        removed <- First(i)

      }else {

        ##
        newcomp <- Append(newcomp, SubList(i,1,l-1))
        removed <- Nth(i,l)

      }

    } else {
     newcomp <- Append(newcomp,i)
    }

	a <- a +1
   }

  return [newcomp,removed]
}


define AddDisk(config,nextcol,disk)
{

   a <- 1
   newcomp <- []
   loop(i,config)
   {
    if(a == nextcol)
    {
      newcomp <- Append(newcomp, Append(i,disk))

    } else {
     newcomp <- Append(newcomp,i)
    }

	a <- a +1
   }

  return newcomp
}


define ShuffleDisks()
{
  order <- Shuffle(Sequence(1,gNumDisks,1))
  config <- [[],[],[]]
  loop(i,order)
   {
      stack <- RandomDiscrete(3)
      config <- AddDisk(config,stack,i)
   }


   return config
}


define StackEqual(stack1,stack2)
{
  equal <- 1

  loop(x,  Transpose([stack1,stack2]))
  {
     a <-  First(x)
     b <-  Nth(x,2)

    if(Length(a) == Length(b) )
       {
            loop(j,Transpose([a,b]))
            {
                if(First(j) != Nth(j,2))
                 {
                     equal <- 0
                 }
            }
 
       } else {
         equal <- 0
       }
  }
 return equal
}