##
##   This is a basic version of a 'trail making' task.
##   The goal is to connect the dots.
##
##
##
##
##
##
##


define Start(p)
{

##  SeedRNG(300)

  useReitan  <- 0    ##Whether to use Reitan's points in the mix.
  numtrials <- 3     ##total number of trials per condition (A and B)
  			    	 ##if usereitan == 1, 2 of them will be the Reitan configurations


  gTargSize <- 20 ##Size in pixels of targets
  gTargclickSize <- 20 ##Size of click zone; may be smaller or larger
                      ##than target
  gNumTargs <- 25    #Number of targets
  gDrawLines <- 1    #Whether to draw lines
  gSleepEasy <- 1
  
  ##Parameters controlling printable area for dots
  gxmin <- 50
  gxmax <- 750
  gymin <- 50
  gymax <- 550  

  gtol <- 35    #tolerance, in pixels, between points


  gWin <- MakeWindow()
  gStimColor <- MakeColor("darkblue")
  gstimFont <-  MakeFont("VeraMono.ttf",0,18,MakeColor("yellow"),gStimColor,1)
  gclickedFont <- MakeFont("VeraMono.ttf",1,18,MakeColor("yellow"),gStimColor,1)
  gFileOut <- FileOpenWrite("ptrails-"+gSubNum+".txt")
  gSumFile <- FileOpenWrite("ptrails-summary-"+gSubNum+".txt")
    inst <- "In this experiment, your goal is to click on each circle, in sequence, as quickly as you can.  When you click on the correct circle, its number will change to boldface, and a line will be drawn from the previous circle to the new circle.  On some trials, the circles will be numbered from 1 to 25, and you should click on them in numerical order (1-2-3-4, and so on).   On other trials, the circles will have both numbers (1 to 13) and letters (A through L), and you should click on them in an alternating order (1-A-2-B-3-C and so on).  If you click the wrong circle, no line will be drawn.  The trial will continue until you have successfully clicked on all of the circles in the correct order. 

After the display appears, you can examine the circles as long as you want.  Timing will not begin until you click on the first circle, which is labeled '1' on every trial.

 Ask the experimenter if you have any questions.

   Press the mouse button to begin."
   tb  <- EasyTextBox(inst,20,20,gWin,20,gVideoWidth-40,500)
   Draw()
   WaitForMouseButton()   
   Hide(tb)
   Draw()

   gFooter <- EasyLabel("",gVideoWidth/2,gVideoHeight-25,gWin,16)


   ptA <- []
   ptB <- []
  
   while(Length(ptA) < numtrials)
    {
      pts <- MakePoints(gxmin, gxmax, gymin, gymax, gtol, gNumTargs)       
      ptA <- Append(ptA,pts)
      ptB <- Append(ptB,pts)
    }


   if(useReitan) 
   {
     pts <- Merge([ReitanPoints("A"),ReitanPoints("B"),ReitanPoints("B"),ReitanPoints("A")],
         	      FlattenN(Transpose([Shuffle(ptA),Shuffle(ptB)]),1) )


   } else { 
     pts <- FlattenN(Transpose([Shuffle(ptA),Shuffle(ptB)]),1)
   }



  FilePrint(gSumFile,"sub type distance studytime totaltime mediantime targs clicks acc")
   type <- 1
   gTrial <- 1
   loop(i,pts)
    {
      Trial(i,type)
      type <- 3-type
      gTrial <- gTrial + 1
    }



   tb.text<- "Congratulations.  Hit any key to finish"
   Show(tb)
   Draw() 
   WaitForAnyKeyPress()    
}


define ReitanPoints(type)
{
  if(type=="A")
   { 
   pts <- [[503,359],[393,428],[532,460],[530,238],[371,254],
	       [453,305],[361,359],[286,449],[308,515],[347,443],
		   [472,530],[235,551],[284,306],[230,380],[219,81],
		   [290,175],[427,71],[407,191],[551,122],[473,117],
		   [589,69],[592,234],[596,548],[566,349],[547,530]]

   } else {
   ##Canonical points for test B

   pts <- [[382,285],[480,434],[297,480],[368,142],[372,221],
		   [464,344],[416,131],[527,105],[525,305],[536,516],
		   [365,485],[258,533],[312,276],[263,390],[242,112],
		   [266,323],[311,110],[463,104],[575,70],[542,438],
		   [569,555],[221,558],[220,368],[243,497],[217,80]]

   }
  return pts
}
  
define Trial(pts,type)
{

  num <- Length(pts)
  if(type==1)
  {
    stim <- Sequence(1,num,1)

  } elseif(type==2) {

    nums <- Sequence(1,26,1)
    lets <- ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
    stim <- SubList(Flatten(Transpose([nums, lets])),1,num)
  }



   
   if(type==1 or type==3)
    {
     msg <-     "Click on each number consecutively. (1-2-3-4)"

    } else {
     msg <- "Click alternately on each number and letter in order. (1-A-2-B)."
    }

   gFooter.text <- "Press mouse to begin. " + msg
   Draw()
   WaitForDownClick()
   gFooter.text <- msg
   stimObjects <-  PlotTargets(pts,gTargSize,stim)
   Draw()
   starttime <- GetTime()

   hits <- 0
   clicks <- 0
   remaining <- pts
   next <- First(pts)
   last <- next
   ##Keep track of last click and last successful click
   lastsucc <- GetTime()
   lastclick <- lastsucc

   dist <- 0    #Keep track of the distance
   times <- []  #keep track of individual times

   studytime <- 0

   while(Length(remaining)>0)
    {
      wait <- 1

      ##Repeat this loop until we get a down click
      while(wait)
       {
         pos <- WaitForMouseButton()
         if(Nth(pos,4)=="<pressed>")
          {
            wait <- 0
            clicktime <- GetTime()
            clicks <- clicks + 1
          }
       }

    ##The first click finishes 'study', so reset start time.
    if(studytime == 0)
     {
       studytime <- clicktime - starttime
       starttime <- clicktime
     }
   ##Did we click on a point?
   id <- ClickedOn(pos,pts)


   if(id > 0)
     {
       if(ClickedOn(pos,[next]))
         {

           corr <- 1 

           if(gDrawLines)
           {

                x0 <- First(last)
                y0 <- Nth(last,2)
                xdiff <- First(next) - x0
                ydiff <- Nth(next,2) - y0

                l <- Line(First(last),Nth(last,2),xdiff,ydiff,gStimColor)
                AddObject(l,gWin)
                stimObjects <- Append(stimObjects,l)

           }

           ## Increment the total distance travelled
           dist <- dist + Dist(last,next)
 
           ## keep track of the time to make the hit.
           times <- Append(times,clicktime - lastsucc)

           if(Length(remaining)==1)
            {
              remaining <- [] 
     
            } else {
              remaining <- SubList(remaining,2,Length(remaining))
              last <- next
              next <- First(remaining)           
            }

           hits <- hits + 1
           x <- Nth(Nth(stimObjects,id),2)
           x.Font <- gclickedfont
           Draw()
         } else {
           corr <- 0 
         }

        FilePrint(gFileOut,gSubNum +  " "+ gtrial + " " + clicks + " "  + hits + " " + clicktime + " " + First(pos) + " " +   Nth(pos, 2) + " " +  corr + " " + id + " " + (clicktime - lastclick) + " "+ (clicktime-lastsucc))
        lastclick <- clicktime
        if(corr)
          {
            lastsucc <- clicktime
          }

     }


  }

   FilePrint(gSumFile,gSubNum + " " + type+ " " + dist + " " + studytime + " " + (clicktime - starttime) + " "  + Median(times) +   " " + hits + " " +clicks + " " + hits/clicks )

   RemoveObjects(stimObjects,gWin)
 
}

define ClickedOn(pos,targets)
{
   click <- SubList(pos,1,2)
   index <- 1
   id <- 0
   loop(i,targets)
   {
      if(Dist(click,i)<=gTargClickSize)
      {
         id <- index
         break          
      }
    index <- index + 1
   }
    return id
}
 

define PlotTargets(pts,size,labels)
{
  comp <- []
  tmp <- Transpose([pts,labels])
  loop(i,tmp)
   {
      pos <- First(i)
      label <- Nth(i,2)
      comp <- Append(comp,  AddTarget(pos,label,size))
   }
 return comp
}


define MakePoints(xmin, xmax, ymin, ymax, tol, num)
{

   ##Note that it is possible to arrange the situation 
   ## so that the distribution will never be satisfied.  So, lets
   ## set up a 'limit' at which point we give up and return the best
   ## we have so far.

   limit <- 100

  ## First, just initialize num points.
  pts <- []
  i <- 1
  while(i <= num)
   {

     x <- xmin + Random()*(xmax-xmin)
     y <- ymin + Random()*(ymax-ymin)
     pts <- Append(pts, [x,y])
     i <- i + 1
   }

  #Now, check for the minimum distance between two points.
   tries <- 1
   minpair <-  GetMinDist(pts)


   while(First(minpair) < tol and tries < limit)
   {

 #    xxx <-  PlotTargets(pts,30, Sequence(1,num,1))
 #    Draw()

     pt1id <- Nth(minpair,2)
     pt2id <- Nth(minpair,3)
 
     pt1 <- Nth(pts,pt1id)
     pt2 <- Nth(pts,pt2id)

    #resample the 'bad' points

     pt1 <-   [ xmin + Random()*(xmax-xmin),
                  ymin + Random()*(ymax-ymin) ]

     pt2 <-   [ xmin + Random()*(xmax-xmin),
                  ymin + Random()*(ymax-ymin) ]


     ##Reassemble pts
     tmp <- RemoveSubset(pts,[pt1id,pt2id])
     pts <- Merge(tmp,[pt1,pt2])


     minpair <-  GetMinDist(pts)

     tries <- tries + 1

   }

  return Shuffle(pts)
}

define GetMinDist(pts)
{
   len <- Length(pts)
   index1 <- 1
   mindist <- Dist(First(pts),Nth(pts,2))
   id1 <- 1
   id2 <- 2
 
   loop(i,pts)
   {
     pt1 <- i
     index2 <- index1 + 1
 

     if(index2 < len)
      {
      rest <- SubList(pts,index2, Length(pts))
      loop(j, rest)
       { 
        d <- Dist(i,j)

        if(d < mindist)
        {
          mindist <- d
          id1 <- index1
          id2 <- index2
        }

        index2 <- index2 + 1
      }
      }
     index1  <- index1 + 1
   }

   return [mindist,id1,id2]
}


define AddTarget(pos,letter,size)
{

   x <- First(pos)
   y <- Nth(pos,2)

   crc <- Circle(x,y,size,gStimColor,1)
   lab <- MakeLabel(letter+"",gstimFont)
   AddObject(crc,gWin)
   AddObject(lab,gWin)

   Move(crc,x,y)
   Move(lab,x,y)
   
   return [crc,lab]
}

define RemoveObjects(list,win)
{
   loop(i,Flatten(list))
   { 
     RemoveObject(i,win)
   }
}

define VecTimes(a,b)
{
   tmp <- Transpose([a,b])
   out <- []
   loop(i,tmp)
   {
     out <- Append(out, First(i) * Nth(i,2))
   }
  return out
}

define VecSum(a,b)
{
   tmp <- Transpose([a,b])
   out <- []
   loop(i,tmp)
   {
     out <- Append(out, First(i) + Nth(i,2))
   }
  return out
}

define Dist(a,b)
{
  return Sqrt((First(a)- First(b))^2 + (Nth(a,2) - Nth(b,2))^2)
}




##  This function takes a list of anything, and a list of indexes
##  specifying the items to extract from the list.  The indexes can
##  be in any order, but the extracted list will be in the order 
##  of the original list.  Items that are not numbers less than or 
##  equal to the length of the list will be ignored.
define RemoveSubset(list, items)
{
   #Check the arguments to insure they are the proper type
    if(not IsList(list))
	{
	    SignalFatalError("First argument of function [RemoveSubset(<list>,<list>)] is not a list")
	}
    if(not IsList(items))
	{
	    SignalFatalError("First argument of function [RemoveSubset(<list>,<list>)] is not a list")
	}


    returnList <- []      #Make an initial blank list to return
    index <- 1            #keep track of the index
    loop(i, list)
    {
	#If the index is in the items list, add it to the return list
	if(not IsMember(index, items))
	{
	    returnList <- Append(returnList, i)
	}
	index <- index + 1
    }

    return returnList
}

define WaitForDownClick()
{
   continue <- 1
   while(continue) 
    {
		x <- WaitForMouseButton()
        if(Nth(x,4) == "<pressed>")
        { 
         continue <- 0
        }
    }
     return x
}
