define Start(p)
{

  lengths <- [2,4,6]
  trialBase <- 25  ##how many targets and foils per block.

  gSleepEasy <- 1
  gwin <- MakeWindow("black")
  MakeDirectory("data")
  
  needsubnum <- 0
  if(gSubNum+""=="0")
  {
   needsubnum <- 1
  }

  if(FileExists("data/"+gSubNum))
   {
    needsubnum <- 1
   }

 if(not needsubnum)
  {
    gFileOut <- FileOpenAppend("data/"+gSubNum+"/sternberg-"+gSubNum+".csv")   
  }

  while(needSubNum)
  {
     gSubNum <- GetSubNum(gWin)
   if(FileExists("data/"+gsubnum))
    {
      opt <- GetEasychoice("Subject code already in use.  Choose new code or add session?",
          ["Choose new code","Add Session"], ["new","add"],gWin)

      if(opt == "add")
      {
        needsubnum <- 0
	gFileOut <- FileOpenAppend("data/"+gSubNum+"/sternberg-"+gSubNum+".csv") 
      } 
     } else {
       needsubnum <- 0
       MakeDirectory("data/"+gsubnum)
       gFileOut <- FileOpenWrite("data/"+gSubNum+"/sternberg-"+gSubNum+".csv") 
     }

  }



  log <- FileOpenAppend("data/runlog.txt")
  FilePrint(log, gSubNum + "," + TimeStamp() + "Sterberg started")
 
  MessageBox("In this task, you will first see and memorize a short list of letters.  For example BN.  Once you have memorized the list, you will see a sequence of letters, and be asked to judge whether each one was or was not on the list.  Letters on the list should be indicated with the left shift key, letters not on the list with a right shift key.  Click below when you are ready to begin.",gWin)

  ShowCursor(0)  
  ##The 'stimuli' should be a sampling of N consonants

  datAcc <- []
  datRT <- []
  datCond <- []
  datTF  <- []

  cons <- FileReadList("UppercaseConsonants.txt")
  trial <- 1
  loop(length,lengths)
  {

      #Pick the letters--both the target set and the nonset
      letters <- Shuffle(cons)
      stim <- SubList(letters,1,length)
      nonset <- SubList(letters, length+1,Length(letters))
      
      ##now create the stimulus sets
      targs <- SampleNWithReplacement(stim,trialBase)
      foils <- SampleNWithReplacement(nonset,trialBase)



      ##Create a stimulus sequence in random order      
      stimbase <- Merge(targs,foils)
      tf <- Merge(Repeat("T",trialbase),Repeat("F",trialbase))
      stimsequence <- Shuffle(Transpose([stimbase,tf]))

      lab <- EasyLabel(ListToString(stim),gVideoWidth/2,100,gWin,44)
      lab2 <- EasyLabel("To be learned sequence.  Press any key to begin test.",gVideoWidth/2,gVideoHeight/2,gWin,25)
      lab3 <- EasyLabel("<leftshift> PRESENT                             ABSENT <rightshift>",gVideoWidth/2,gVideoHeight-100,gWin,25)
      Draw()
      WaitForAnyKeyPress()
      Hide(lab)
      Hide(lab2)
      Hide(lab3)
      Draw()

     correct <- 0 

     loop(st,stimsequence)
      {	

      if(not correct)
      {
         Show(lab)
	 Show(lab3)
         Draw()
         Wait(1500)
         Hide(lab)
	 Hide(lab3)
         Draw()
      }
         out <- Trial(stim,First(st),Second(st))
	 correct <- Second(out)
	 outlist <- [gSubNum,length,trial,st,out]
	 FilePrint(gFileOut,MakeCSVLine(Flatten(outlist)))
	 trial <- trial + 1

	 ##record data:
	 PushOnEnd(datAcc,correct)
	 PushOnEnd(datRT,Third(out))
	 PushOnEnd(datCond,length)
	 PushOnEnd(datTF,Second(st))
      }

  }

  ##Compute stats
  levs <- Levels(datCond)
  Print(levs)

  out <- TimeStamp() +CR(1) + "Participant: "+ gSubNum +CR(2)
  datall <- Transpose([datRT,datAcc,datTF])
  loop(i,levs)
  {
  
   subset <- Transpose(Filter(datAll,Match(datCond,i)))
   filterT <- Match(Third(subset),"T")
   filterF <- Match(Third(subset),"F")

   rtMeanT <- Mean(Filter(First(subset),filterT))
   rtMeanF <- Mean(Filter(First(subset),filterF))

   accMeanT <- Mean(Filter(Second(subset),filterT))
   accMeanF <- Mean(Filter(Second(subset),filterF))

   out <- out + i + " Present     "+ Round(rtmeanT) + "    " + Round(accMeanT,3) +CR(1)
   out <- out + i + " Absent      "+ Round(rtmeanF) + "    " + Round(accMeanF,3) +CR(1)

  }


  out2 <- FileOpenWrite("data/"+gSubNum+"/report.txt")
  FilePrint(out2,out)

  FilePrint(log, gSubNum + "," + TimeStamp() + "Sterberg completed")
  MessageBox(out+"Thanks for your participation",gWin)
}

##Do the basic
define Trial(learned,stim,type)
{

   lab2 <- EasyLabel("<leftshift> PRESENT                             ABSENT <rightshift>",gVideoWidth/2,gVideoHeight-100,gWin,25)
   stimlab<- EasyLabel(stim,gVideoWidth/2,gVideoHeight/2,gWin,50)

   
   Show(stimlab)
   Draw()
   time1 <- GetTime()
   resp <- WaitForListKeyPress(["<lshift>","<rshift>"])
   time2 <- GetTime()
   Hide(stimlab)
   Draw()
   Wait(20)
   ##Score for correctness:
   if(type=="T")
   {
     corr <- resp == "<lshift>"
   } else {
     corr  <- resp == "<rshift>"
   }
 return [resp,corr,(time2-time1)]
}

define MakeCSVLine(list)
{
  sep <- ""
  out <- ""
  loop(i,list)
  { 
     out <- out + sep + i
     sep <- ","
  }
 return out
}
