#//////////////////////////////////////////////////////////////////////////////
#//    Name:       src/pebl-lib/Utility.pbl
#//    Purpose:    Contains PEBL functions used for various purposes
#//    Author:     Shane T. Mueller, Ph.D.
#//    Copyright:  (c) 2004-2010 Shane T. Mueller <smueller@obereed.net>
#//    License:    GPL 2
#//
#//
#//
#//     This file is part of the PEBL project.
#//
#//    PEBL is free software; you can redistribute it and/or modify
#//    it under the terms of the GNU General Public License as published by
#//    the Free Software Foundation; either version 2 of the License, or
#//    (at your option) any later version.
#//
#//    PEBL is distributed in the hope that it will be useful,
#//    but WITHOUT ANY WARRANTY; without even the implied warranty of
#//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#//    GNU General Public License for more details.
#//
#//   You should have received a copy of the GNU General Public License
#//   along with PEBL; if not, write to the Free Software
#//   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#//////////////////////////////////////////////////////////////////////////////


#  The functions defined here are available for use in any PEBL program.
#  They are written in PEBL itself, and so are interpreted, but the ease of
#  writing them in PEBL far outweighed the possible speed-up that
#   might be gained by writing them directly in C++.


define GetNIMHDemographics(code,window, file)
{

        foreground <- MakeColor("black")
        background <- MakeColor("grey")
        white      <- MakeColor("white")
        fontBig   <- MakeFont(gPEBLBaseFont, 0, 22, foreground,  background,1)
        fontSmall <- MakeFont(gPEBLBaseFont, 0, 15, foreground,  background, 1)
        fontTB    <- MakeFont(gPEBLBaseFont, 0, 30, foreground,  white, 1)  

        #####################################################
        ##First, ask about gender.

        question <- MakeLabel("What is your sex/gender?",fontBig)
        option1  <- MakeLabel("1. Male", fontSmall) 
        option2  <- MakeLabel("2. Female", fontSmall) 
        option3  <- MakeLabel("3. Prefer not to say.", fontSmall) 
        option4  <- MakeLabel(" ", fontSmall) 
        option5  <- MakeLabel(" ", fontSmall) 
        option6  <- MakeLabel(" ", fontSmall) 
                                          
        #Add the text to the window
        AddObject(question, window)
      
        AddObject(option1, window)
        AddObject(option2, window)
        AddObject(option3, window)
        AddObject(option4, window)
        AddObject(option5, window)
        AddObject(option6, window)


        #Position in properly
        MoveCorner(question, 100, 150)            
        MoveCorner(option1, 120, 220)
        MoveCorner(option2, 120, 240)
        MoveCorner(option3, 120, 260)
        MoveCorner(option4, 120, 280)
        MoveCorner(option5, 120, 300)
        MoveCorner(option6, 120, 320)
         
        Draw()
        
        #Get their response
        responseGender <- WaitForListKeyPress(["1", "2", "3"])
 
         
        Hide(question)
        Hide(option1)
        Hide(option2)
        Hide(option3)
        Draw()        

        ##########################################################
        ##Ask about ethnicity
        SetText(question, "Are you of Hispanic or Latino/Latina Heritage?")
        SetText(option1, "[Y] Yes")
        SetText(option2, "[N] No")
        MoveCorner(question,100, 150)
        MoveCorner(option1, 120, 220)
        MoveCorner(option2, 120, 240)

        Show(question)
        Show(option1)
        Show(option2)
        Draw()
       
        responseEthnicity <- WaitForListKeyPress(["Y", "N"])
       
        Hide(question)
        Hide(option1)
        Hide(option2)
        Draw()

        ##########################################################
        ##Ask about Race

        SetText(question, "What is your race?")
        SetText(option1, "[1] American Indian or Native American")
        SetText(option2, "[2] Asian")
        SetText(option3, "[3] Native Hawaiian or Pacific Islander")
        SetText(option4, "[4] Black/African American")
        SetText(option5, "[5] White")
        SetText(option6, "[6] Other/Prefer not to say")

        MoveCorner(question, 100, 150)            
        MoveCorner(option1, 120, 220)
        MoveCorner(option2, 120, 240)
        MoveCorner(option3, 120, 260)
        MoveCorner(option4, 120, 280)
        MoveCorner(option5, 120, 300)
        MoveCorner(option6, 120, 320)

        Show(question)
        Show(option1)
        Show(option2)
        Show(option3)
        Show(option4)
        Show(option5)
        Show(option6)
        Draw()
        responseRace <- WaitForListKeyPress(["1", "2", "3", "4", "5", "6"])



        Hide(question)
        Hide(option1)
        Hide(option2)
        Hide(option3)    
        Hide(option4)    
        Hide(option5)
        Hide(option6)
        Draw()

        ##############################################################
        ##Ask about Age.
        SetText(question, "How old are you (in years)?")
        SetText(option1,"Hit 'enter' key when age is entered.")
                  
        MoveCorner(question,100,150)
        MoveCorner(option1, 100,250)
        Show(question)
        Show(option1)
        tb <- MakeTextBox("",fontTB,100,40)
        AddObject(tb,window)
        MoveCorner(tb,100,180)
        Draw()
        responseAge <-  GetInput(tb, "<return>")
                  

        fileOut <- FileOpenAppend(file)
        FilePrint(fileOut, code + " " + TimeStamp() + " " + responseGender+ " " + responseEthnicity + " " + responseRace + " " + responseAge)
        FileClose(fileOut)
        RemoveObject(question,window)
        RemoveObject(option1,window)
        RemoveObject(option2,window)
        RemoveObject(option3,window)
        RemoveObject(option4,window)
        RemoveObject(option5,window)
        RemoveObject(option6,window)
        RemoveObject(tb,window)
}     


define MoveCorner(object,x, y)
{
  if(IsTextBox(object))
  {
   Move(object,x,y)
  } else {
  size    <- GetSize(object)
  centerY <- y + First(size)/2
  centerX <- x + Nth(size,2)/2
  Move(object, centerX, centerY)
  }
}




define MoveCenter(object,x, y)
{
  if(IsTextBox(object))
  {
  size    <- GetSize(object)
  newY <- y - First(size)/2
  newX <- x - Nth(size,2)/2
  Move(object, newX, newY)

  } else {
   Move(object,x,y)
  }
}



## This splits 'string' into a list, breaking each time 'split'
## appears in sting.  It discards the split token(s).
## if split is "", split at each letter.  This should be able
## to accept a list of split characters, but does not yet.  
## Also, it could use the PEBLUtility::Tokenize, becoming a compiled function.
define SplitString(string, split)
{
  ##Check to see if the arguments are of the right type.
 if(not IsString(string))
  {
    SignalFatalError("First argument of function[SplitString(<string>,<string>)] is not a string")
  }

 if(not IsString(split))
  {
    SignalFatalError("Second argument of function[SplitString(<string>,<string>)] is not a string")
  }

  ##Pre-calculate the lengths.
  splitLength <- StringLength(split)
  strLength   <- StringLength(string)
  
   returnList <- []   ##Make a blank list to return
   begin <- 1         ##Start at the first letter
   length <- 0        ##With a 0-length list	

   while(begin <= strLength+1)
   { 

    length <- 0        ## reset length to  0-length list

     ##check substrings of splitlength until we have a match
     while(begin + length <= strLength and
          (SubString(string,begin+length,splitLength) != split))
     {
       length <- length + 1
     }


     ##length now contains the length of the current token.
     ##If length is equal to 0, for 0-length split symbol, set it equal to 1.
     ## (0-length split symbols indicate a split between each letter)
     if(length == 0 and splitLength == 0)
     {
        length <- 1
     }
    
     #Extract the token we want
     token <- SubString(string, begin, length)
 
     #Don't add the token if its length is zero and the splitlength is zero too;
     #this happens at the end of a string
  
     if(not (StringLength(token) == 0 and splitLength == 0))
     {
        returnList <- Append(returnList, token)
     } 
 
     #update the beginning position of the next token
     begin <- begin + length + splitLength 

    }

   return(returnList)
}



##These helper functions require gTextBox, gHeader, and gFooter to work.
define LikertTrial(text)
{
  SetText(gTextBox,text)
  SetText(gHeader,"How much you agree with the following statement:")
  SetText(gFooter,"   1     2     3     4     5     6")
  SetText(gFooter2,"Not at all                       Strongly")
  Draw()

  t1 <- GetTime()
  response <-WaitForListKeyPress(["1","2","3","4","5","6"])
  t2 <- GetTime()
  return "LK " + response + " " + (t2 - t1)
}

##These helper functions require gTextBox, gHeader, and gFooter to work.
define YesNoTrial(text)
{
  SetText(gTextBox,text)
  SetText(gHeader,"Do you agree or disagree with the following statement:")
  SetText(gFooter," 'Z'                   '/'")
  SetText(gFooter2,"YES                      NO")

  Draw()
  t1 <- GetTime()
  response <-WaitForListKeyPress(["Z","/"])
  t2 <- GetTime()
  return "YN " + response + " " + (t2 - t1)
}



define CR(n)
{
  
  x <- "
"
 y <- Repeat(x,n)
 return ListToString(y)

}

define Tab(n)
{
 x <- "	"
 y <- Repeat(x,n)
 return ListToString(y)   
}

define ListToString(list)
{
  if(not IsList(list))
   {
     SignalFatalError("Object [" + list + "] is not a list in ListToString")
   }
   x <- ""
   loop(i,list)
    {
      x <- x + i
    }
  return x
}


## This makes a 'formatted' text string,  
## making sure it has length size.  If val is too short,
## it chops off the end of val; if it is too short, it pads
## the end of val with spaces.  
define Format(val, size)
{

  string <- "" + val

  len <- StringLength(string)
 
  #If size is smaller than length, 
  if(size <= len)
  {
    string <- SubString(string,1,size) 
  }else {
   pad <- ListToString(Repeat(" ",size - len))
   string <- string + pad
  }

  return string
}


## PrintList and FilePrintList 
## prints a list on a single line, without formatting (, or [])

define PrintList(list)
{
  if(not IsList(list))
   {
     SignalFatalError("Object" + list + "is not a list in PrintList")
   }
  tmp <- ""
  loop(i,list)
  {
    tmp <- tmp + Print_(i+" ")
  }
    tmp <- tmp + Print("")
  return tmp
}


define FilePrintList(file,list)
{

  if(not IsList(list))
   {
     SignalFatalError("Object" + list + "is not a list in FilePrintList")
   }

  tmp <- ""
  loop(i,list)
  {
    tmp <- tmp + FilePrint_(file,i+" ")
  }
   tmp <- tmp + FilePrint(file,"")

   return tmp
}


define ConvertIPString(ip)
{
	nums <- SplitString(ip,".")
	if(not Length(nums) == 4)
    { 
        SignalFatalError("IP Address must have four parts")
    }
   
   base <- 1
   address <- 0

   loop(i,Reverse(nums))
   {
      address <- 256*address + ToNumber(i)
   }
   return address
}


## This replaces all instances of a character in a string with another character
## Useful for saving participant input that might have spaces.

define ReplaceChar(word,char, char2)
{
   list <- SplitString(word, char)
   newString <- ""
   begin <- 0
   loop(i,list)
   {
     if(begin == 0)
     {
       newString <- newString + i
       begin <- 1
     } else {
       newString <- newString + char2 + i
     }
   }
    return newString
}

## Returns the element of database corresponding to the first match of
## key to items in keylist.  If nothing is found, it returns an empty list.
define Lookup(key, keylist, database)
{
  found <- []
  table <- Transpose([keylist, database])
  loop(i, table)
  {

     if(key == First(i))
     {
       found <- Nth(i,2)
       break
     }
  }

   return found
}




## makes a label with a standard font, black on grey, in specified location.
##
define EasyLabel(text,x,y,parent,fontsize)
{

 if(not IsText(text))
   {
      SignalFatalError("First argument of EasyLabel[text,x,y,parent,fontsize] must be text")
   }
 if(not (IsNumber(x) and IsNumber(y)))
   {
      SignalFatalError("Second and third argument of EasyLabel[text,x,y,parent,fontsize] must be numbers")
   }

  if(not IsWidget(parent))
  { 
    SignalFatalError("EasyLabel[text,x,y,parent,fonsize] must be added to a window, not [" + parent+"]")
  }

  bgcol <- parent.BGCOLOR

  ##HSV val is the max of RGB
  val <- Max([bgcol.RED, bgcol.GREEN, bgcol.BLUE])

  ##Make it white if the background is too dark.
  if(val <=	100)
    { 
      fgcol <- MakeColor("white")
    } else {
      fgcol <- MakeColor("black")
    }
 
  font <-  MakeFont(gPEBLBaseFont,0,fontsize,fgcol,bgcol,0)
  lab <- MakeLabel(text,font)
  AddObject(lab,parent)
  Move(lab,x,y)

  return lab
}


## makes a label with a standard font, black on grey, in specified location.
##
define EasyTextBox(text,x,y,win,fontsize,width,height)
{

#  if(not IsWindow(win))
#  { 
#    SignalFatalError("EasyTextbox[text,x,y,window,fontsize] must be added to a window, not [" + parent+"]")
#  }

  font <-  MakeFont(gPEBLBaseFont,0,fontsize,MakeColor("black"),MakeColor("white"),1)
  tb <- MakeTextBox(text,font,width,height)
  AddObject(tb,win)
  Move(tb,x,y)

  return tb
}



##Make an easy-to-use getsubnum function here.
define GetSubNum(win)
{

  if(not IsWindow(win))
  { 
    SignalFatalError("GetSubNum(win) needs a window to be specified, not [" + win + "]")
  }

   bg    <- MakeCanvas(450,100,MakeColor("grey20"))
   Move(bg,gVideoWidth/2,90)
   AddObject(bg,win)
   query <- EasyLabel("Enter Participant Identifier",225,20,bg,20)


   box <- EasyTextBox("",gVideoWidth/2-50,100, win,20,160,25)
   Draw()
   subnum <- GetInput(box,"<return>")
   
   RemoveObject(query,win)
   RemoveObject(box,win)
   RemoveObject(bg,win)
   return subnum
}


##Make an easy-to-use getsubnum function here.
define GetEasyInput(text,win)
{

  if(not IsWindow(win))
  { 
    SignalFatalError("GetEasyInput(win) needs a window to be specified, not [" + win + "]")
  }

   bg    <- Rectangle(gVideoWidth/2,gVideoHeight/2,gVideoWidth,gVideoHeight,MakeColor("grey"),1)
   AddObject(bg,win)
   font <- MakeFont("Caliban.ttf",0,22,MakeColor("black"),MakeColor("grey"),1)
   query <- MakeLabel(text,font)
   AddObject(query, win)
   Move(query, gVideoWidth/2,80)
   box <- EasyTextBox("",gVideoWidth/2-150,100, win,30,300,200)
   Draw()
   input <- GetInput(box,"<return>")
    
   RemoveObject(query,win)
   RemoveObject(box,win)
   RemoveObject(bg,win)

   return input
}


##Make an easy-to-use messagbox function.
define MessageBox(text,win)
{
  if(not IsWindow(win))
  { 
    SignalFatalError("MessageBox(win) needs a window to be specified, not [" + win + "]")
  }
   bgcol <- win.BGCOLOR

   bg  <- MakeCanvas(gVideoWidth,gVideoHeight,bgcol)
   Move(bg,gVideoWidth/2,gVideoHeight/2)
   AddObject(bg,win)

   box <- EasyTextBox(text,100,100, win,20,gVideoWidth-200,gVideoHeight-200)
   ok <- EasyLabel("OK",gVideoWidth/2,gVideoHeight-50,win,44)

   ##Get foreground color
   ##HSV val is the max of RGB
    val <- Max([bgcol.RED, bgcol.GREEN, bgcol.BLUE])

    ##Make it white if the background is too dark.
    if(val <=	100)
    { 
      fgcol <- MakeColor("white")
    } else {
      fgcol <- MakeColor("black")
    }

   back <- Rectangle(gVideoWidth/2,gVideoHeight-50,80,40,fgcol,0)
   AddObject(back,win)
   Draw()
   ShowCursor(1)
   WaitForClickOnTarget([back],[1])

   RemoveObject(back,win)
   RemoveObject(ok,win)
   RemoveObject(box,win)
   RemoveObject(back,win)

   Draw()

}



##  This takes a number, and pads
##  it with zeros size places to the left
##  of the decimal point,
##  returning a string

define ZeroPad(num, size)
{
  if(not IsNumber(num))
  { 
    SignalFatalError("First argument of ZeroPad(num,size) must be a	number")
  }

  if((not IsInteger(size)) or (size > 10) or (size < 1))
  { 
    SignalFatalError("Second argument of ZeroPad(num,size) must be a positive integer less than 10")
  }
 
  base <- Round(10^(size))
  if(num>base)
   {
     ret <- num+""
   }else{
      
     x <- (base + num)+""
     ret <- SubString(x,2,size)
     
   }
  return ret
}



## This should handle 'Inside' calls for almost anything
##
define Inside(click,object)
{
    if(not IsList(click))
    {
      SignalFatalError("First argument of Inside(<click>, <object>) must be a list specifying [x,y] position.")
    }
	x <- First(click)
    y <- Second(click)
    if((not IsNumber(x)) or (not IsNumber(y)))
     {
       SignalFatalError("First argument of Inside(<click>, <object>) is not a list of numbers.  It must specify [x,y] position.")
     }
    

   if(IsImage(object) or IsLabel(object) or 
      object.name == "<RECTANGLE>" or object.name == "<SQUARE>")
   {
	##First, determine object limits
	xlow <- object.x - object.width/2
	xhigh <- object.x + object.width/2

	ylow <- object.y - object.height/2
	yhigh <- object.y + object.height/2
	
    inside <- (x >= xlow) and (x  <= xhigh) and (y >= ylow) and (y <= yhigh)

   } elseif (IsTextBox(object))
   {
     xlow <- object.x
     xhigh <- object.x+object.width
     ylow <- object.y
     yhigh <- object.y+object.height
     inside <- (x >= xlow) and (x  <= xhigh) and (y >= ylow) and (y <= yhigh)

   } elseif(object.name == "<CIRCLE>")
       {
          d <- Dist([x,y],[object.x,object.y])
          inside  <- (d <= object.r)

   } else {
       SignalFatalError("Second argument of Inside(<click>,<object>) must either be an image, label, textbox, rectangle, square, or circle.")
   }

	return inside
}


define Dist(a,b)
{
  if((not IsList(a)) or (not IsList(b)))
   {
     SignalFatalError("Arguments of Dist(a,b) must both be [x,y] lists.")
   }
  return   Sqrt((First(a)-First(b))^2 + (Second(a) -Second(b))^2)
}


## This will read a CSV file into a nested list.  The CSV file should
## allow quoted text, and not break on commas within quotes.

define ReadCSV(filename)
{
#   if(not IsText(filename))
#    {
#      SignalFatalError("ReadCSV(filename) must be given a text-based file name")
#    }
  #open the file

  file <- FileOpenRead(filename)
  char <- FileReadCharacter(file)

  ##Process each line until the end of the file.
  table <- [] 
  while(not EndOfFile(file))
   { 
    line <- []
    inquote <- 0
    token <- ""
   
    ##Process each character in the line.
    while(not EndOfLine(file))
    {


      ##Determine what to do with it:
      if(char == gQuote and (not inquote))
       {
         inquote <- 1
         token <- token + char

       }elseif(char ==gQuote and inquote)
       {
         inquote <- 0
         token <- token + char

       }elseif(char == "," and (not inquote))
	   {

       token <- StripSpace(token)
       line <- Append(line,StripQuotes(token))
       token <- ""
         
       }else{
         token <- token + char
       }
       
     char <- FileReadCharacter(file)
    }

    ##Add the last character onto the token
      ##Determine what to do with it:
      if(char == gQuote and (not inquote))
       {
         inquote <- 1
         token <- token + char


       }elseif(char ==gQuote and inquote)
       {
         inquote <- 0
         token <- token + char

       }elseif(char == "," and (not inquote))
	   {
    

       token <- StripSpace(token)

          line <- Append(line,StripQuotes(token))
          token <- ""
         
       }else{

         token <- token + char
       }


    ##Add the token onto the line

    token <- StripSpace(token)

    line <- Append(line,StripQuotes(token))


    ##Add the line onto the table 
    if(not EndOfFile(file))
     {
	     table <- Append(table,line)
     }

    #eat and discard the newline character
    FileReadCharacter(file)
    char <- FileReadCharacter(file)

	}

  return table
}

define Enquote(text)
{
 return gQuote + text + gQuote
}


define StripSpace(text)
{
   start <- 1
   end <- StringLength(text)
  
   if(end > 0)
   {
   while(Substring(text,start,1) == " " and start <= end)
     {
       start <- start + 1
     }
   while(Substring(text,end,1) == " " and end > start)
     {
       end <- end - 1
     }

   ret <- SubString(text,start,end)

   } else {
    ret <- text
   }
   return ret
}

##remove quotes from outside of text (but not the inside)
define StripQuotes(text)
{
#   if(not IsText(text))
#    {
#       SignalFatalError("Argument of StripQuotes(text) must be text.")
#    }
   start <- 1
   end <- StringLength(text)
  
   if(end > 0)
   {

   if(SubString(text,end,1)==gQuote)
    {
      end <- end - 1
    }
   if(SubString(text,1,1)== gQuote)
    {
      start <- 2
      end <- end -1
    }

   ret <- SubString(text,start,end)

   } else {
    ret <- text
   }
   return ret
}


##targetlist is a set of graphical objects,
##keylist is a set of keys whose corresponding 
##value should be returned when a graphical object is clicked upon.

define WaitForClickOnTarget(targetlist,keylist)
{
  
  if(not IsList(targetlist))
  { 
    SignalFatalError("First argument of WaitForClickOnTarget(targetlist,keylist) must be a list of graphical objects")
  }

  if(not IsList(keylist))
  { 
    SignalFatalError("Second argument of WaitForClickOnTarget(targetlist,keylist) must be a list")
  }
  
  if(Length(targetlist) <> Length(keylist))
  {
    SignalFatalError("Arguments of WaitForClickOnTarget(targetlist,keylist) must be the same length")
  }

  ret <- ""
  testlist <- Reverse(Transpose([targetlist,keylist]))
   
   wait1 <- 1
   while(wait1)
     {
      wait2 <- 1
      while(wait2)
       {
         pos <- WaitForMouseButton()
         if(Nth(pos,4)=="<pressed>")
          {
            wait2 <- 0
            gClick <- pos
          }
       }

      newtargs <- []
	  
      loop(i,testlist)
          {

             if(Inside(pos,First(i)))
             {
			    wait1 <- 0
                ret <- Nth(i,2)
                break
             }

          }
     }
  return ret
}


##  This just waits for a 'down' click.
##
define WaitForDownClick()
{
   continue <- 1
   while(continue) 
    {
		x <- WaitForMouseButton()
        if(Nth(x,4) == "<pressed>")
        { 
         continue <- 0
        }
    }
     return x
}


