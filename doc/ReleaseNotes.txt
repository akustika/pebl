
--------------------------------------------------
PEBL: Psychology Experiment Building Language
http://pebl.sourceforge.net
pebl-list at lists  sourceforge  net
http://lists.sourceforge.net/lists/listinfo/pebl-list
--------------------------------------------------


About: 

PEBL is a new programming language and interpreter/compiler designed
to make experiment-writing easy. It is cross-platform, written in C++,
and relies on a Flex/Bison parser. Although other platforms are
possible, we currently use the SDL game-programming library
(http://libsdl.org) to easily support multiple platforms with one code
base. PEBL does not require you to purchase anything in order to use
it. It does not require a compiler or experience using any other
programming system.  PEBL is designed to be an open system.  It
requires no licensing or registration fees to use, and you can re-use
the source code as long as you abide by the GNU GPL. This allows you
to freely share your experiments with others without worrying about
licenses, vendor lock-in, or whether you will be able to run your
experiments down the road when your current hardware systems are
obsolete. 


                 RELEASE NOTES
-------------------------------------------------


Version 0.10

* PEBL should read more UTF-8 formats (including ones with BOF
  markers, as produced by notepad), and should give useful 
  errors when reading UTF-16 files, which PEBL cannot use.

* PEBL should return to the original screen resolution under more
  conditions than before.

* Added a new special variable gQuote, which is equal to a quotation
  mark (").  Now, if you need that special character in a text string, 
  you can do things like:
    text <- "Stop when you see the word " +gQuote + "STOP" + gQuote + "."


 * Added a WritePNG() function, to allow for easy creation of 
   screenshots and such.

*  Added GetSystemType() function.  It will return either "OSX",
   "LINUX", or "WINDOWS", depending on your system.

*  Added SystemCall() function.  Allows you to run command-line
   functions, passed in as a text string.  Note that the output of a
   command-line argument is generally not passed back into PEBL; just
   the function's return code, which is usually 0 on sucess or some
   other number on failure (depending upon the type of failure).  Some
   uses might include:
      if(GetSystemType() == "WINDOWS")
       {
         x <- SystemCall("dir input.txt") 
       } else {
         x <- SystemCall("ls input.txt") 
       }

      if(x <> 0)
      {
         SignalFatalError("Expected file input.txt does not exist")
      }



* Added a number of new functions:
   - ZeroPad(number, base) pads the number with up to base 
     zeroes to the left of the decimal place.

* Added some public domain images for feedback




Version 0.09


* Added RotoZooming code.  Now, all graphical objects (textboxes,
labels, imageboxes, but not currently simple shapes) have properties
xzoom, yzoom, and rotation.  These objects can be stretched and
rotated using these properties;


Also, two new generic drawing objects have been added: Polygon and Bezier:

  Polygon(<x>,<y>,<xpoints>,<ypoints>,<color>,<filled>)
  Bezier(<x>, <y>, <xpoints>, <ypoints>, <steps>, <color>)


These allow arbitrary polygons to be created.  

  Three new functions allow fairly flexible operations 
  on sets of points, which can then be turned into polygons.
  They take a list of x,y pairs, and perform the  appropriate operation

  RotatePoints(points,theta)      Where theta is in radians
  ReflectPoints(points)           Reflects left-right along vertical axis
  ZoomPoints(points, xzoom,yzoom) Resizes x/y dimensions of set of points
             

  Two helper functions create sets of points that can be used
  in the above, or fed into polygon.

  MakeStarPoints(<outer radius>, <inner radius>, <number of peaks>)
  MakeNGonPoints(<radius>,<number of edges>)


A few helper functions build ready-made polygons that can be added
directly to a window:
    
 BlockE(x,y,h,w,thickness,direction,color)
  Here, direction indicates where the E is pointing: 
     1=right, 2=down, 3=left, 4=up.

 Plus(x,y,size, width, color)


* Made package relocatable on linux/mac (thanks to binreloc)

* Added a script variable to control busy-waiting:
    set gSleepEasy <- 1 to put mini sleeps in the busy wait loop.
    This reduces the timing resolution by a little (tests show it
    can lose  1-2 ms in comparison to the busy-wait strategy.
    This may make PEBL useable on some older systems, and may make
    worst-case timing better with a small sacrifice of typical-case.
    Furthermore, it can be changed during the script, so you don't peg
    cpu time while instructions are being read.

* Fixed labels so that you can assign a font with label.font <- font

* The color of the window can be accessed with window.BGCOL

* Added limited mouse events.  The new functions include:
  WaitForMouseButton(),
  This takes no arguments, and returns a 4-tuple list, indicating:
  [xpos, ypos, button_id [1-3], "<pressed>" or "<released>"]
  SetMouseCursorPosition(x,y)
  GetMouseCursorPosition()  (returns [x,y]

 A new version of the "iowa" gambling task demos clicking
  interface instead of keyboard.  In addition, a new demo experiment
  hunt.pbl uses some mouse-controlled event to search for a target.

* Added IsWindow() and IsShape()

* Helper functions for easy creation of labels and textboxes:

 EasyLabel(text,x,y,win,fontsize)
 EasyTextBox(text,x,y,win,fontsize,width,height)

 No need to define fonts, colors, sizes, or even adding/moving to the
 location you want--It does it all as a one-liner.

* Helper function to get subject number (if none was set in the
  launcher

 GetSubNum(win) 

  It will get and return a subject identifier.  
  After a window has been defined, a simple thing to do is

  if(gSubNum == 0)
  {
   gSubNum <- GetSubNum(win)
  }

* Added SummaryStats(<data>, <conditions>) , a statistic summarizer
  function, which computes  means/sds/medians of <data> by
  <conditions>.  Currently, <data> must be a single list
  
* Added PrintList(<list>) and FilePrintList(<file>,<list>), which
  print out a list without the , and [] formatting.

* Fixed some bugs in the windows launcher

* Added a PrintProperties() function, mainly for debugging.  Use it to 
display the properties an object has defined.

* Fixed a bunch of things in the test battery.  This release
  officially contains Battery Version 0.3.

   Ten new tests: 
   	   * The Stroop test, 
	   * 2-column addition
 	   * 4-choice RT, 
	   * Lexical Decision task, 
	   * (Posner's) Spatial Cueing task,
	   * PEBL Manual Dexterity task
       * PEBL compensatory tracking task (ptracker)
       * A Mental rotation task 
 	   * Matrix rotation task
       * Time wall, a visual time production/estimation task.
   -Much improved version of Berg's Cardsort. Fixed bugs, added proper
   computation of perseverations, etc.
   -Added a mouse-driven version of Bechera's Gambling Task, and some
   other fixes.

Summary list of new functions:
 IsShape *
 IsWindow *
 GetSubNum 
 PrintList 
 FilePrintList 
 SummaryStats 
 EasyLabel
 EasyTextBox
 WaitForMouseButton 
 GetMouseCursorPosition 
 SetMouseCursorPosition 
 BlockE 
 Plus 
 MakeStarPoints 
 MakeNGonPoints 
 ZoomPoints
 ReflectPoints
 RotatePoints
 Polygon
 Bezier
 PrintProperties 


-------------------------------------------------- 
Version 0.08
September 2007


* Unicode support for foreign scripts.
* Fixed bug which made abs and < not work properly
* Fixing cr\lf parse errors on Unix
* fixed .height and .width properties for images
* Fix crasher when drawing cursor out-of-bounds in textboxes
* Fixed cursor formatting error when reflowing text
* Adding functions to compute normal distribution:
   CumNormInv(p) (uses accurate numerical approximation)
   NormalDensity(x)
   SDTDPrime(hr,far)
   SDTBeta(hr,far) 
 
* Update the launcher so it doesn't give misleading feedback when no
  stdout.txt file is created
* Fix launcher so it correctly uses subject number.
* Return to compiling with gcc on windows (after previous use of MSVC++ Express)

Test Battery:
  * Fixes to IGT, add feedback graph
  * fixes to  probabilistic reversal, 
  * Added Hungry Donkey, a kid's version of IGT
  * BCST (compute perseverations), compute trial number
  * Add Psychomotor Vigilance Task (PVT)
  * Add working Partial report (iconic memory) experiment.
  * Added Tower of London demo experiment

* Updated launcher and output handling to avoid the 'cannot find file'
  bug people get scared off by.

Now, stdout.txt and stderr.txt are stored in the file that the script
is run from, and the launcher looks there for the output.  Now,
stdout.txt should alway be written, even if it just a blank file, and
so no informative message should appear.


* Standard script files (including all the demo and the battery
  scripts) are now found in pebl-exp0.08, instead of just pebl-exp.
  This is just so nobody gets their custom scripts overwritten.



--------------------------------------------------
Version 0.07
June 2006

The seventh release of PEBL has arrived. This release incorporates a
set of functions allowing network communication via tcp/ip, a number
of bugfixes for the property system, a bunch of new functions, new
fonts, and several new mini-projects associated with PEBL.  Along with
releasing the standard PEBL distribution, we are releasing (1) The
PEBL Test Battery, a set of tasks often used for clinical and
neuropsychological purposes; (2) PEBL image archive, a set of
public-domain images for use in experiments, and (3) PEBL sound
archive, a set of .wav files useful in experiments.

New fonts: 
 I've tracked down a bunch of fonts with really liberal
 licensing, which should fill in a few gaps left in the Bitstream
 Vera fonts.  New fonts are listed below, and all fonts are viewable
 by running the fonts.pbl script in the demo directory.  One font,
 called Stimulasia.ttf, is our own custom font that will be used to
 put custom glyphs useful in experimental research.

Caliban.ttf       CharisSILR.ttf           FreeSansOblique.ttf     
Caslon-Black.ttf  DoulosSILR.ttf           FreeSans.ttf            
CaslonBold.ttf    FreeMonoBoldOblique.ttf  FreeSerifBoldItalic.ttf  
CaslonItalic.ttf  FreeMonoBold.ttf         FreeSerifBold.ttf        
CaslonRoman.ttf   FreeMonoOblique.ttf      FreeSerifItalic.ttf      
CharisSILBI.ttf   FreeMono.ttf             FreeSerif.ttf            
CharisSILB.ttf    FreeSansBoldOblique.ttf  GenI102.ttf              
CharisSILI.ttf    FreeSansBold.ttf         GenR102.ttf              
Humanistic.ttf    Stimulasia.ttf

These new fonts add considerably to the download size, but it is still
pretty small, and it is pretty important to have a common set that can
be counted on being present.

Network Communication:
 To enable synchronizing and communicating between computers, a set of
 functions have been added that allows primitive communication via
 TCP/IP.  We use the sdl_net library to achieve this, and so that
 library is now required to build and use PEBL.


Syntax:  
 Syntax has been polished to allow a bit more freedom in where
 brackets { and } are placed, and we've added an elseif (){}
 continuation to the if() statement, so you can do things like:

##This should print out "THREE"
  if(3 == 1) {
             Print("ONE")
  }elseif(3==4){
             Print("TWO")
  }elseif(4==4){
             Print("THREE")
  }elseif(4==4){
             Print("FOUR")
  }else{Print("FIVE")}


New functions:
*Tab(<n>)          Adds a tab character to a text string
*CR(<n>)            Adds newline/carriage return
*Format()       Prints a number/string with a specific number of
               characters, either by truncating or padding with spaces.
*ListToString() Concatenates everything in a list into a string.
*ShowCursor()   Hides or shows cursor
*WaitForListKeyPressWithTimeout()
               Waits for either a keypress from a specified set or a timeout.
*Quantile(<list>,<quantile>)     Computes specific quantile of a list of data.
          
*ShuffleRepeat()  Repeats a list, shuffling each time.

*ShuffleWithoutAdjacents() 
               Shuffles a list, allowing one to specify 
               items that should not be adjacent in output list
                          
*LatinSquare()  Quick-and-dirty latin square
*ReplaceChar()  Substitutes  one character for another in a string.
*Lookup(<key>,<keylist>,<database>)        Returns element matching a lookup key in another list.

*ConnectToIP(<ip>,<port>)   
               Connects to a port on another computer, returning
               network object.


*ConnectToHost(<hostname>,<port>) 
               Connects to a port on another computer, returning
               network object.


*WaitForNetworkConnection(<port>)
               Listens on a port until another computer connects,
               returning a network object

*CloseNetworkConnection(<network>)  
               Closes network connection
*SendData(<network>,<datastring>)  
               Sends a data string over connection.
*GetData(<network>,<length>) 
               Return a string from network connection
*ConvertIPString(<ip-as-string>)  
               Changes an ip-string into integer

Misc & Bugfixes:
 * Arrow keys can be used--use "<left>", "<right>", "<up>" and "<down>" in
 functions like WaitForKeyPress().
 * The mathematical power operator (^) now works.
 * Fixed a bug that introduced garbage characters when converting
 number to string or printing numbers
 * Fixed a wrapping bug in textboxes where a single letter followed
 by a return would not wrap to the next line.
 * When creating a file in a non-existent directory, PEBL did not
 previously complain, but no file would be created.  Now, the script
 fails with appropriate warning.
 * Fixed MakeColorRGB(). Previously, this function had defined colors with an
alpha transparency set to completely transparent, rather than
solid. Now it should be possible to create colors that can be seen!



 


--------------------------------------------------
Version 0.06
January 2006

The sixth version of PEBL has been released. While the previous
release focused on stability, this release brings some substantial
changes to the underlying object management system.  Consequently, we
expect a few bugs to have crept in undetected.  Major user-visible
changes include the ability to create simple shape objects (like
Circle(), Ellipse(), etc.), the ability to access object properties
directly with a variable.property syntax, and a few new statistical
functions.  A new command-line option, -s, enables you to set the
variable gSubNum automatically at initiation, and the global variables
gVideoWidth and gVideoHeight can now be changed at the beginning of a
script, affecting the display screen size when MakeWindow() is called.
We also have a nicely improved 100-page manual in pdf and html format
thanks to the efforts of Gulab Parab and Samuele Carcegeno, a new
tutorial for beginners trying to learn PEBL, and a WIKI available on
the website for help and tips, and where you can post your own
experiments.  We have improved PEBL's handling of international
keyboards, and so a number of non-US keyboards may now work better, albeit
with a few problems.  The windows version seems to not work however, so please
test your favorite keyboard setup with the testinput.pbl script and
send us feedback. This will be a priority for version 0.07.

SHAPES. 
 Now, several graphical 'shape' objects can be created and
displayed directly, as an alternative to generating an image file with
an external drawing program and loading it with MakeImage().  These
include Line(), Square(), Rectangle(), Circle(), and Ellipse().  They
can be created as filled or unfilled objects, moved around with the
Move() function or .x and .y properties.  Like regular images, they
must be added to the parent window with the AddObject() function, and
are drawn when the Draw() function is called.  Shapes definition
function include their initial coordinates in the parent window.
Shapes come courtesy of the sdl_gfx library, so if you are compiling
on linux, you need this library installed.

Object/Properties.
Previously, properties of objects were held privately by the object
and were essentially inaccessible to user experiments, and modified by
special functions.  With the new changes, object properties are
available directly from the variable using a variable.property
syntax.  All properties of an object are available for reading, and
many can be set using the assignment symbol '<-'.  For example, if a
variable representing an object has the property TEXT, it can be
accessed like:
  myText <-  object.TEXT
  Print(myText)

and it can be modified by doing something like:
  object.TEXT <- "New Text"

Old accessor functions are still available, so
  SetText(object, "Alternative new text")
still works.

Properties are case insensitive, and are currently predefined for all
objects.  Some objects and their accessible properties:


All Widgets:          .X, .Y, .Width, .Height, .Visible
Text-based widgets:   .Font, .Text
TextBoxes:            .CursorPos, .Editable
Colors:               .Red, .Green, .Blue, .Alpha
Fonts:                .Bold, .Italic, .Underline, .Filename, .FGColor,
                      .BGColor
All Shapes:           properties of widgets, .Color, .OutlineColor, .Filled
Circle:               .Radius
Square:               .Size
Rectangle:            .SizeX, .SizeY
Ellipse:              .rX, .rY
Line:                 .dX, dY
     



New Functions:
  PEBL 0.06 introduces several new for creating shapes:  Circle(),
  Square(), Line(), Ellipse(), Rectangle().  Median(), Mean(),
  Order(), Rank(), Sum(), and StdDev()

--------------------------------------------------
Version 0.05
July 2005

The fifth PEBL release (named 0.05 rather than 0.5) focuses on memory
management and other infrastructure.  There are few user-visable changes,
but there are substantial beneath-the-hood fixes thanks to memory
profiling tools like memprof and valgrind.  Most of the reckless use
of pointers has been changed to counted pointers; std::string has
replaced most of the use of char*, the parser doesn't leak memory
anymore, the parse tree gets cleaned up properly, and the default
compile options use -pedantic, forcing me to fix all wierd warnings
that will hopefully catch errors as well.

There are a couple cool additions to the syntax.  First, character
strings in programs can span multiple lines, and those linebreaks are
reflected in TextBoxes.  This makes it easier to put instructions
in-line, because you don't have to do "text part one" + " text part
two" to span lines.   Next, I've added a 'break' keyword that allows
you to escape out of loops immediately.  I've also made keywords case
insensitive, as was originally described in the manual but was never
really true.

I've also added the function 'DesignBalancedSampling', which works
sort of like SampleWithReplacement:  You give it a list and a length
of list you need--this list can (should) be longer than the list.  It
will return a list of items which contains multiple shuffled copies
of the original list, so that every instance on the list is present
before any are repeated, and so that there are no direct repeats on
the cusps between lists.  It chops off the last shuffled list.  If
the epoch-shuffling is not desired, one can Shuffle() it afterwards.

For linux users, I've mocked up a script (in the bin/ directory)
that provides a demonstration on how to use the zenity program as a
front-end launcher for your experiments, allowing you to enter things
like subject numbers and conditions before the experiment launches.
For emacs users, there is a new (and simplistic) .el mode available,
which performs syntax highlighting but doesn't do proper indentation
yet.  Finally, earlier this year I released an experimental version of
PEBL 0.4 for Mac OSX, and 0.05 will be the first official release of
PEBL for OSX.


--------------------------------------------------
Version 0.4
March 2, 2005

The fourth release of PEBL is here.  This release includes a bunch of
new functions, some ready-to-run experiments I have prepared, and it
allows you to set the display options as arguments, enabling different
screen sizes, full-screen or windowed operation, and specifying the
SDL driver you want to use.  I am also experimenting with an an
automatic setup utility on Windows that puts PEBL into c:\Program
files\PEBL, creates a PEBL experiment folder in My Documents, and
creates launchers that run these nicely.

Details:

  New Command-line arguments:
  --driver <drivername> 
    e.g., on linux, dga for direct access or xf86 for X11
    driver. No real difference on Windows
     
--display  <widthxheight>
  Controls the screen width and height (in pixels). Defaults to 640x480.
  Currently, only the following screens are supported:
                512x384
                640x480
                800x600
                960x720
                1024x768
                1152x864
                1280x1024
  Note: the way this is invoked may be changed in the future.

--depth
  Controls the pixel depth.  Depends on your video card.  Currently,
  depths of 2,8,15,16,24, and 32 are allowed on the command-line.
--windowed
--fullscreen
  Controls whether the script will run in a window or fullscreen.

  These are accessible on windows through new controls in the launcher
  application.  


  New Functions:
    FoldList
    Flatten
    FlattenN
    Replace
    MoveCorner
    MoveCenter
  

I now include a set of experiments in the 'experiments' directory, which appears
in My Documents\PEBL-exp in windows.  These include:

    cue.pbl:             List learning/Gist recall experiments
    IAT.pbl:             Implicit Association Test (http://implicit.harvard.edu/implicit/)
    rsvp.pbl:            A demo trial to test RSVP-type presentation
    lexicaldecision.pbl: Sample lexical decision task
    masking.pbl:         A 2AFC visual perception task with briefly-presented stimuli
    letterstrings:       Another 2AFC task, with letter strings.


Other demo scripts that are not necessarily
full-fledged experiments still live in the PEBL/demo directory. 

   Notes:  There is a scoping/reference counter problem so that some
   memory sometimes doesn't get released properly at the end of a
   program, causing a segfault.  This is annoying, but pretty
   harmless.


--------------------------------------------------
Version 0.3
September 13, 2004

The third public release of PEBL is now available!  In addition
to the fixing of numerous bugs, I have improved the event
handling system for better performance, added an
abort-execution keyboard shortcut, added numerous new
functions, including an all-in-one function that collects
the demographic information required by NIMH, and have enabled
text entry into textboxes.  I have been using and testing
this version for a few months, and I think it is ready to
release.

Details:
 
  * Added an event queue that captures OS events, along with
    'state' events previously handled.
  * TextBoxes are user-editable with the GetInput() function
  * GetNIMHDemographics() collects NIMH data
  * New event-related functions: 
                                         WaitForKeyPress(),
                                         WaitForAnyKeyPress(),
                                         WaitForKeyRelease(),
                                         WaitForListKeyPress(),
                                                         
  * New String handling functions:
                                         Uppercase(),
                                         Lowercase(),
                                         StringLength()
                                         SubString(),
                                         FindInString(),
					                     SplitString()
  
  * Programs can be aborted with <CTRL><ALT><SHIFT><\>
  * Other new functions:
                                    MoveCorner()
	                                GetInput()
                                    SetFont()

--------------------------------------------------
Version 0.2 
January 25, 2004

The second release of PEBL is now available.  In preparing a new experiment,
 I found and fixed many bugs and implemented a dozen or so new functions.  
Highlights include a new textbox object for displaying instructions and other
text, and primitive windows launcher that allows you to set arguments like the 
subject number or condition.

Notes:

 * Primitive TextBox objects are available
 * Several fixes to bugs in grammar
 * Win32 launcher
 * On Windows (tm), PEBL now runs at HIGH priority
 * Included some new sample images.
 * Improved manual modestly.
 * Began implementing useful library of built-in PEBL functions


--------------------------------------------------
Version 0.1
January 3, 2004

I would like to announce the first public release of PEBL, the
cross-platform open source system for creating psychology experiments.
It is incomplete and certainly contains bugs that limit its
usefulness. With this release, it is usable on Linux and Microsoft
Windows.



Notes:  

The first release of PEBL offers basic stimulus presentation and
response collection capabilities.  PEBL can present many different
kinds of images, it can present text using any truetype font, and it
can present sounds stored in the .wav format.  It can collect
responses using a standard computer keyboard. It is designed for
controlling short experiments typically associated with cognitive
psychology, on human subjects using standard computer systems.
Consequently, it does not currently offer the ability to control or
detect external devices, like the kind typically used in animal
research labs (as well as in many cognitive and neuroscience research
programs).

For detailed descriptions on how to use PEBL, consult the PEBL manual
found in the source or executable distributions at doc/manual.txt.

PEBL is still embryonic, and the form it will eventually take will be
driven by what its users want and need.  If you are interested in
guiding its future, sign up to the email list at
http://lists.sourceforge.net/lists/listinfo/pebl-list.  We welcome
contributions at any level; from testing and bug-reporting, to the
creation of new sample experiments, to the writing of documentation,
to web site design and maintenance, to hard-core programming. Come
join us and help build a better system for designing experiments.

Despite its nascent state, the system is sufficient for many types of
experiments.  It currently offers a library of about 125 functions
that allow complex experiments to be created, and simplify many of the
common tasks associated with creating an experiment.  We hope you find
it useful and an attractive alternative to the expensive and
proprietary solutions that currently exist.


Caveats:  

PEBL does not yet have great control over presentation timing,
nor does it manage its priority well so it will easily get
interrupted by the operating system.  Do not rely on this system for
collecting reaction times or presenting tachistoscopic stimuli  
unless it is acceptable to be tens of milliseconds off.  The control
over stimulus presentation is compromised because the SDL library
API does not provide a way to sync with the video card vertical
blank.  Timing in general is compromised by the fact that it runs on
time-sharing operating systems that do not allow for real-time
scheduling.  The timing can be improved by running at a higher
priority and shutting off unnecessary programs, as well as by using
an operating system that supports low-latency kernel pre-emption (like
Linux 2.6).

Many of the documented functions are not implemented yet.  If you
attempt to use an unimplemented function, it will signal a fatal
error that will tell you that the function is not implemented. Sorry
for the inconvenience.

I anticipate making a bug-fix release in early 2004
--------------------------------------------------
